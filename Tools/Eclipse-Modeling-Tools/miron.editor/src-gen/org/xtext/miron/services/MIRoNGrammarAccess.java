/*
 * generated by Xtext 2.12.0
 */
package org.xtext.miron.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.xtext.roqme.services.RoQMEGrammarAccess;

@Singleton
public class MIRoNGrammarAccess extends AbstractGrammarElementFinder {
	
	public class MironModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.miron.MIRoN.MironModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cDescriptionAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cDescriptionElementDescriptionParserRuleCall_0_0_0 = (RuleCall)cDescriptionAssignment_0_0.eContents().get(0);
		private final Keyword cMironKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNamespaceAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cNamespaceEStringParserRuleCall_0_2_0 = (RuleCall)cNamespaceAssignment_0_2.eContents().get(0);
		private final Assignment cSentencesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSentencesImportParserRuleCall_1_0 = (RuleCall)cSentencesAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cDataTypesAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cDataTypesDataTypeDefinitionParserRuleCall_2_0_0 = (RuleCall)cDataTypesAssignment_2_0.eContents().get(0);
		private final Assignment cVariablesAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cVariablesTypedVariableParserRuleCall_2_1_0 = (RuleCall)cVariablesAssignment_2_1.eContents().get(0);
		private final Assignment cSentencesAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cSentencesSentenceParserRuleCall_2_2_0 = (RuleCall)cSentencesAssignment_2_2.eContents().get(0);
		
		//MironModel mirondatatypes::MironModel:
		//	(description=ElementDescription? 'miron' namespace=EString)?
		//	sentences+=Import* (dataTypes+=DataTypeDefinition
		//	| variables+=TypedVariable
		//	| sentences+=Sentence)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(description=ElementDescription? 'miron' namespace=EString)? sentences+=Import* (dataTypes+=DataTypeDefinition |
		//variables+=TypedVariable | sentences+=Sentence)*
		public Group getGroup() { return cGroup; }
		
		//(description=ElementDescription? 'miron' namespace=EString)?
		public Group getGroup_0() { return cGroup_0; }
		
		//description=ElementDescription?
		public Assignment getDescriptionAssignment_0_0() { return cDescriptionAssignment_0_0; }
		
		//ElementDescription
		public RuleCall getDescriptionElementDescriptionParserRuleCall_0_0_0() { return cDescriptionElementDescriptionParserRuleCall_0_0_0; }
		
		//'miron'
		public Keyword getMironKeyword_0_1() { return cMironKeyword_0_1; }
		
		//namespace=EString
		public Assignment getNamespaceAssignment_0_2() { return cNamespaceAssignment_0_2; }
		
		//EString
		public RuleCall getNamespaceEStringParserRuleCall_0_2_0() { return cNamespaceEStringParserRuleCall_0_2_0; }
		
		//sentences+=Import*
		public Assignment getSentencesAssignment_1() { return cSentencesAssignment_1; }
		
		//Import
		public RuleCall getSentencesImportParserRuleCall_1_0() { return cSentencesImportParserRuleCall_1_0; }
		
		//(dataTypes+=DataTypeDefinition | variables+=TypedVariable | sentences+=Sentence)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//dataTypes+=DataTypeDefinition
		public Assignment getDataTypesAssignment_2_0() { return cDataTypesAssignment_2_0; }
		
		//DataTypeDefinition
		public RuleCall getDataTypesDataTypeDefinitionParserRuleCall_2_0_0() { return cDataTypesDataTypeDefinitionParserRuleCall_2_0_0; }
		
		//variables+=TypedVariable
		public Assignment getVariablesAssignment_2_1() { return cVariablesAssignment_2_1; }
		
		//TypedVariable
		public RuleCall getVariablesTypedVariableParserRuleCall_2_1_0() { return cVariablesTypedVariableParserRuleCall_2_1_0; }
		
		//sentences+=Sentence
		public Assignment getSentencesAssignment_2_2() { return cSentencesAssignment_2_2; }
		
		//Sentence
		public RuleCall getSentencesSentenceParserRuleCall_2_2_0() { return cSentencesSentenceParserRuleCall_2_2_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.miron.MIRoN.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURIEStringParserRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAliasAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAliasEStringParserRuleCall_2_1_0 = (RuleCall)cAliasAssignment_2_1.eContents().get(0);
		
		//@ Override Import mironkernel::Import:
		//	'import' importURI=EString ('as' alias=EString)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importURI=EString ('as' alias=EString)?
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importURI=EString
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }
		
		//EString
		public RuleCall getImportURIEStringParserRuleCall_1_0() { return cImportURIEStringParserRuleCall_1_0; }
		
		//('as' alias=EString)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'as'
		public Keyword getAsKeyword_2_0() { return cAsKeyword_2_0; }
		
		//alias=EString
		public Assignment getAliasAssignment_2_1() { return cAliasAssignment_2_1; }
		
		//EString
		public RuleCall getAliasEStringParserRuleCall_2_1_0() { return cAliasEStringParserRuleCall_2_1_0; }
	}
	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.miron.MIRoN.DataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnumTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEventTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNumericTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTimeTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cNumericSampledTypeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//@ Override DataType roqmedatatypes::DataType:
		//	BooleanType | EnumType | EventType | NumericType | TimeType | NumericSampledType;
		@Override public ParserRule getRule() { return rule; }
		
		//BooleanType | EnumType | EventType | NumericType | TimeType | NumericSampledType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BooleanType
		public RuleCall getBooleanTypeParserRuleCall_0() { return cBooleanTypeParserRuleCall_0; }
		
		//EnumType
		public RuleCall getEnumTypeParserRuleCall_1() { return cEnumTypeParserRuleCall_1; }
		
		//EventType
		public RuleCall getEventTypeParserRuleCall_2() { return cEventTypeParserRuleCall_2; }
		
		//NumericType
		public RuleCall getNumericTypeParserRuleCall_3() { return cNumericTypeParserRuleCall_3; }
		
		//TimeType
		public RuleCall getTimeTypeParserRuleCall_4() { return cTimeTypeParserRuleCall_4; }
		
		//NumericSampledType
		public RuleCall getNumericSampledTypeParserRuleCall_5() { return cNumericSampledTypeParserRuleCall_5; }
	}
	public class EnumTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.miron.MIRoN.EnumType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBehaviorTreeEnumTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSimpleEnumTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//@ Override EnumType roqmedatatypes::EnumType:
		//	BehaviorTreeEnumType | SimpleEnumType;
		@Override public ParserRule getRule() { return rule; }
		
		//BehaviorTreeEnumType | SimpleEnumType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BehaviorTreeEnumType
		public RuleCall getBehaviorTreeEnumTypeParserRuleCall_0() { return cBehaviorTreeEnumTypeParserRuleCall_0; }
		
		//SimpleEnumType
		public RuleCall getSimpleEnumTypeParserRuleCall_1() { return cSimpleEnumTypeParserRuleCall_1; }
	}
	public class NumericSampledTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.miron.MIRoN.NumericSampledType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cCardinalityAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCardinalityINTTerminalRuleCall_1_1_0 = (RuleCall)cCardinalityAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cUnitKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cMeasurementUnitAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cMeasurementUnitEStringParserRuleCall_2_0_1_0 = (RuleCall)cMeasurementUnitAssignment_2_0_1.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cUnorderedGroup_2.eContents().get(1);
		private final Group cGroup_2_1_0 = (Group)cAlternatives_2_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1_0_0 = (Keyword)cGroup_2_1_0.eContents().get(0);
		private final Assignment cConstraintsAssignment_2_1_0_1 = (Assignment)cGroup_2_1_0.eContents().get(1);
		private final RuleCall cConstraintsCompactLowerBoundParserRuleCall_2_1_0_1_0 = (RuleCall)cConstraintsAssignment_2_1_0_1.eContents().get(0);
		private final Keyword cColonKeyword_2_1_0_2 = (Keyword)cGroup_2_1_0.eContents().get(2);
		private final Assignment cConstraintsAssignment_2_1_0_3 = (Assignment)cGroup_2_1_0.eContents().get(3);
		private final RuleCall cConstraintsCompactPrecisionParserRuleCall_2_1_0_3_0 = (RuleCall)cConstraintsAssignment_2_1_0_3.eContents().get(0);
		private final Keyword cColonKeyword_2_1_0_4 = (Keyword)cGroup_2_1_0.eContents().get(4);
		private final Assignment cConstraintsAssignment_2_1_0_5 = (Assignment)cGroup_2_1_0.eContents().get(5);
		private final RuleCall cConstraintsCompactUpperBoundParserRuleCall_2_1_0_5_0 = (RuleCall)cConstraintsAssignment_2_1_0_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_1_0_6 = (Keyword)cGroup_2_1_0.eContents().get(6);
		private final Group cGroup_2_1_1 = (Group)cAlternatives_2_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cConstraintsAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cConstraintsCompactLowerBoundParserRuleCall_2_1_1_1_0 = (RuleCall)cConstraintsAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cColonKeyword_2_1_1_2 = (Keyword)cGroup_2_1_1.eContents().get(2);
		private final Assignment cConstraintsAssignment_2_1_1_3 = (Assignment)cGroup_2_1_1.eContents().get(3);
		private final RuleCall cConstraintsCompactUpperBoundParserRuleCall_2_1_1_3_0 = (RuleCall)cConstraintsAssignment_2_1_1_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_1_1_4 = (Keyword)cGroup_2_1_1.eContents().get(4);
		private final Assignment cConstraintsAssignment_2_2 = (Assignment)cUnorderedGroup_2.eContents().get(2);
		private final RuleCall cConstraintsNumericTypeConstraintParserRuleCall_2_2_0 = (RuleCall)cConstraintsAssignment_2_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSamplesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSamplesSampleValueParserRuleCall_4_0 = (RuleCall)cSamplesAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cSamplesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cSamplesSampleValueParserRuleCall_5_1_0 = (RuleCall)cSamplesAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//NumericSampledType mirondatatypes::NumericSampledType:
		//	'number' ('[' cardinality=INT ']')? (('unit' measurementUnit=EString)?
		//	& ('(' constraints+=CompactLowerBound ':' constraints+=CompactPrecision ':' constraints+=CompactUpperBound ')' | '('
		//	constraints+=CompactLowerBound ':' constraints+=CompactUpperBound ')')?
		//	& constraints+=NumericTypeConstraint*)
		//	'{'
		//	samples+=SampleValue (',' samples+=SampleValue)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'number' ('[' cardinality=INT ']')? (('unit' measurementUnit=EString)? & ('(' constraints+=CompactLowerBound ':'
		//constraints+=CompactPrecision ':' constraints+=CompactUpperBound ')' | '(' constraints+=CompactLowerBound ':'
		//constraints+=CompactUpperBound ')')? & constraints+=NumericTypeConstraint*) '{' samples+=SampleValue (','
		//samples+=SampleValue)* '}'
		public Group getGroup() { return cGroup; }
		
		//'number'
		public Keyword getNumberKeyword_0() { return cNumberKeyword_0; }
		
		//('[' cardinality=INT ']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//cardinality=INT
		public Assignment getCardinalityAssignment_1_1() { return cCardinalityAssignment_1_1; }
		
		//INT
		public RuleCall getCardinalityINTTerminalRuleCall_1_1_0() { return cCardinalityINTTerminalRuleCall_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
		
		//('unit' measurementUnit=EString)? & ('(' constraints+=CompactLowerBound ':' constraints+=CompactPrecision ':'
		//constraints+=CompactUpperBound ')' | '(' constraints+=CompactLowerBound ':' constraints+=CompactUpperBound ')')? &
		//constraints+=NumericTypeConstraint*
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//('unit' measurementUnit=EString)?
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'unit'
		public Keyword getUnitKeyword_2_0_0() { return cUnitKeyword_2_0_0; }
		
		//measurementUnit=EString
		public Assignment getMeasurementUnitAssignment_2_0_1() { return cMeasurementUnitAssignment_2_0_1; }
		
		//EString
		public RuleCall getMeasurementUnitEStringParserRuleCall_2_0_1_0() { return cMeasurementUnitEStringParserRuleCall_2_0_1_0; }
		
		//('(' constraints+=CompactLowerBound ':' constraints+=CompactPrecision ':' constraints+=CompactUpperBound ')' | '('
		//constraints+=CompactLowerBound ':' constraints+=CompactUpperBound ')')?
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }
		
		//'(' constraints+=CompactLowerBound ':' constraints+=CompactPrecision ':' constraints+=CompactUpperBound ')'
		public Group getGroup_2_1_0() { return cGroup_2_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1_0_0() { return cLeftParenthesisKeyword_2_1_0_0; }
		
		//constraints+=CompactLowerBound
		public Assignment getConstraintsAssignment_2_1_0_1() { return cConstraintsAssignment_2_1_0_1; }
		
		//CompactLowerBound
		public RuleCall getConstraintsCompactLowerBoundParserRuleCall_2_1_0_1_0() { return cConstraintsCompactLowerBoundParserRuleCall_2_1_0_1_0; }
		
		//':'
		public Keyword getColonKeyword_2_1_0_2() { return cColonKeyword_2_1_0_2; }
		
		//constraints+=CompactPrecision
		public Assignment getConstraintsAssignment_2_1_0_3() { return cConstraintsAssignment_2_1_0_3; }
		
		//CompactPrecision
		public RuleCall getConstraintsCompactPrecisionParserRuleCall_2_1_0_3_0() { return cConstraintsCompactPrecisionParserRuleCall_2_1_0_3_0; }
		
		//':'
		public Keyword getColonKeyword_2_1_0_4() { return cColonKeyword_2_1_0_4; }
		
		//constraints+=CompactUpperBound
		public Assignment getConstraintsAssignment_2_1_0_5() { return cConstraintsAssignment_2_1_0_5; }
		
		//CompactUpperBound
		public RuleCall getConstraintsCompactUpperBoundParserRuleCall_2_1_0_5_0() { return cConstraintsCompactUpperBoundParserRuleCall_2_1_0_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_1_0_6() { return cRightParenthesisKeyword_2_1_0_6; }
		
		//'(' constraints+=CompactLowerBound ':' constraints+=CompactUpperBound ')'
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1_1_0() { return cLeftParenthesisKeyword_2_1_1_0; }
		
		//constraints+=CompactLowerBound
		public Assignment getConstraintsAssignment_2_1_1_1() { return cConstraintsAssignment_2_1_1_1; }
		
		//CompactLowerBound
		public RuleCall getConstraintsCompactLowerBoundParserRuleCall_2_1_1_1_0() { return cConstraintsCompactLowerBoundParserRuleCall_2_1_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_2_1_1_2() { return cColonKeyword_2_1_1_2; }
		
		//constraints+=CompactUpperBound
		public Assignment getConstraintsAssignment_2_1_1_3() { return cConstraintsAssignment_2_1_1_3; }
		
		//CompactUpperBound
		public RuleCall getConstraintsCompactUpperBoundParserRuleCall_2_1_1_3_0() { return cConstraintsCompactUpperBoundParserRuleCall_2_1_1_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_1_1_4() { return cRightParenthesisKeyword_2_1_1_4; }
		
		//constraints+=NumericTypeConstraint*
		public Assignment getConstraintsAssignment_2_2() { return cConstraintsAssignment_2_2; }
		
		//NumericTypeConstraint
		public RuleCall getConstraintsNumericTypeConstraintParserRuleCall_2_2_0() { return cConstraintsNumericTypeConstraintParserRuleCall_2_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//samples+=SampleValue
		public Assignment getSamplesAssignment_4() { return cSamplesAssignment_4; }
		
		//SampleValue
		public RuleCall getSamplesSampleValueParserRuleCall_4_0() { return cSamplesSampleValueParserRuleCall_4_0; }
		
		//(',' samples+=SampleValue)*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//samples+=SampleValue
		public Assignment getSamplesAssignment_5_1() { return cSamplesAssignment_5_1; }
		
		//SampleValue
		public RuleCall getSamplesSampleValueParserRuleCall_5_1_0() { return cSamplesSampleValueParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class SampleValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.miron.MIRoN.SampleValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueNumericValueParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Keyword cAffectsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cImpactsAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cImpactsImpactOnQualityParserRuleCall_2_0_0 = (RuleCall)cImpactsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Assignment cImpactsAssignment_2_1_1_0 = (Assignment)cGroup_2_1_1.eContents().get(0);
		private final RuleCall cImpactsImpactOnQualityParserRuleCall_2_1_1_0_0 = (RuleCall)cImpactsAssignment_2_1_1_0.eContents().get(0);
		private final Group cGroup_2_1_1_1 = (Group)cGroup_2_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_1_0 = (Keyword)cGroup_2_1_1_1.eContents().get(0);
		private final Assignment cImpactsAssignment_2_1_1_1_1 = (Assignment)cGroup_2_1_1_1.eContents().get(1);
		private final RuleCall cImpactsImpactOnQualityParserRuleCall_2_1_1_1_1_0 = (RuleCall)cImpactsAssignment_2_1_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//SampleValue mirondatatypes::SampleValue:
		//	value=NumericValue
		//	'affects' (impacts+=ImpactOnQuality | '{' (impacts+=ImpactOnQuality (',' impacts+=ImpactOnQuality)*)? '}');
		@Override public ParserRule getRule() { return rule; }
		
		//value=NumericValue 'affects' (impacts+=ImpactOnQuality | '{' (impacts+=ImpactOnQuality (',' impacts+=ImpactOnQuality)*)?
		//'}')
		public Group getGroup() { return cGroup; }
		
		//value=NumericValue
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//NumericValue
		public RuleCall getValueNumericValueParserRuleCall_0_0() { return cValueNumericValueParserRuleCall_0_0; }
		
		//'affects'
		public Keyword getAffectsKeyword_1() { return cAffectsKeyword_1; }
		
		//impacts+=ImpactOnQuality | '{' (impacts+=ImpactOnQuality (',' impacts+=ImpactOnQuality)*)? '}'
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//impacts+=ImpactOnQuality
		public Assignment getImpactsAssignment_2_0() { return cImpactsAssignment_2_0; }
		
		//ImpactOnQuality
		public RuleCall getImpactsImpactOnQualityParserRuleCall_2_0_0() { return cImpactsImpactOnQualityParserRuleCall_2_0_0; }
		
		//'{' (impacts+=ImpactOnQuality (',' impacts+=ImpactOnQuality)*)? '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(impacts+=ImpactOnQuality (',' impacts+=ImpactOnQuality)*)?
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//impacts+=ImpactOnQuality
		public Assignment getImpactsAssignment_2_1_1_0() { return cImpactsAssignment_2_1_1_0; }
		
		//ImpactOnQuality
		public RuleCall getImpactsImpactOnQualityParserRuleCall_2_1_1_0_0() { return cImpactsImpactOnQualityParserRuleCall_2_1_1_0_0; }
		
		//(',' impacts+=ImpactOnQuality)*
		public Group getGroup_2_1_1_1() { return cGroup_2_1_1_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_1_1_0() { return cCommaKeyword_2_1_1_1_0; }
		
		//impacts+=ImpactOnQuality
		public Assignment getImpactsAssignment_2_1_1_1_1() { return cImpactsAssignment_2_1_1_1_1; }
		
		//ImpactOnQuality
		public RuleCall getImpactsImpactOnQualityParserRuleCall_2_1_1_1_1_0() { return cImpactsImpactOnQualityParserRuleCall_2_1_1_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class BehaviorTreeEnumTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.miron.MIRoN.BehaviorTreeEnumType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cCardinalityAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCardinalityINTTerminalRuleCall_1_1_0 = (RuleCall)cCardinalityAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLiteralsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLiteralsBehaviorTreeLiteralParserRuleCall_3_0 = (RuleCall)cLiteralsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cLiteralsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cLiteralsBehaviorTreeLiteralParserRuleCall_4_1_0 = (RuleCall)cLiteralsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//BehaviorTreeEnumType mirondatatypes::BehaviorTreeEnumType:
		//	'enum' ('[' cardinality=INT ']')?
		//	'{'
		//	literals+=BehaviorTreeLiteral (',' literals+=BehaviorTreeLiteral)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'enum' ('[' cardinality=INT ']')? '{' literals+=BehaviorTreeLiteral (',' literals+=BehaviorTreeLiteral)* '}'
		public Group getGroup() { return cGroup; }
		
		//'enum'
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }
		
		//('[' cardinality=INT ']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//cardinality=INT
		public Assignment getCardinalityAssignment_1_1() { return cCardinalityAssignment_1_1; }
		
		//INT
		public RuleCall getCardinalityINTTerminalRuleCall_1_1_0() { return cCardinalityINTTerminalRuleCall_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//literals+=BehaviorTreeLiteral
		public Assignment getLiteralsAssignment_3() { return cLiteralsAssignment_3; }
		
		//BehaviorTreeLiteral
		public RuleCall getLiteralsBehaviorTreeLiteralParserRuleCall_3_0() { return cLiteralsBehaviorTreeLiteralParserRuleCall_3_0; }
		
		//(',' literals+=BehaviorTreeLiteral)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//literals+=BehaviorTreeLiteral
		public Assignment getLiteralsAssignment_4_1() { return cLiteralsAssignment_4_1; }
		
		//BehaviorTreeLiteral
		public RuleCall getLiteralsBehaviorTreeLiteralParserRuleCall_4_1_0() { return cLiteralsBehaviorTreeLiteralParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class BehaviorTreeLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.miron.MIRoN.BehaviorTreeLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBehaviorTreeLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cPresetAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final Keyword cPresetPresetKeyword_3_0_0 = (Keyword)cPresetAssignment_3_0.eContents().get(0);
		private final Assignment cReferenceAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final CrossReference cReferenceBehaviorTreeCrossReference_3_1_0 = (CrossReference)cReferenceAssignment_3_1.eContents().get(0);
		private final RuleCall cReferenceBehaviorTreeQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cReferenceBehaviorTreeCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cAffectsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cGroup_4.eContents().get(1);
		private final Assignment cImpactsAssignment_4_1_0 = (Assignment)cAlternatives_4_1.eContents().get(0);
		private final RuleCall cImpactsImpactOnQualityParserRuleCall_4_1_0_0 = (RuleCall)cImpactsAssignment_4_1_0.eContents().get(0);
		private final Group cGroup_4_1_1 = (Group)cAlternatives_4_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4_1_1_0 = (Keyword)cGroup_4_1_1.eContents().get(0);
		private final Group cGroup_4_1_1_1 = (Group)cGroup_4_1_1.eContents().get(1);
		private final Assignment cImpactsAssignment_4_1_1_1_0 = (Assignment)cGroup_4_1_1_1.eContents().get(0);
		private final RuleCall cImpactsImpactOnQualityParserRuleCall_4_1_1_1_0_0 = (RuleCall)cImpactsAssignment_4_1_1_1_0.eContents().get(0);
		private final Group cGroup_4_1_1_1_1 = (Group)cGroup_4_1_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_1_1_1_0 = (Keyword)cGroup_4_1_1_1_1.eContents().get(0);
		private final Assignment cImpactsAssignment_4_1_1_1_1_1 = (Assignment)cGroup_4_1_1_1_1.eContents().get(1);
		private final RuleCall cImpactsImpactOnQualityParserRuleCall_4_1_1_1_1_1_0 = (RuleCall)cImpactsAssignment_4_1_1_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_1_1_2 = (Keyword)cGroup_4_1_1.eContents().get(2);
		
		//BehaviorTreeLiteral mirondatatypes::BehaviorTreeLiteral:
		//	{mirondatatypes::BehaviorTreeLiteral} name=ID ":" (preset?="preset" |
		//	reference=[behaviortree::BehaviorTree|QualifiedName]) ('affects' (impacts+=ImpactOnQuality | '{'
		//	(impacts+=ImpactOnQuality (',' impacts+=ImpactOnQuality)*)? '}'))?;
		@Override public ParserRule getRule() { return rule; }
		
		//{mirondatatypes::BehaviorTreeLiteral} name=ID ":" (preset?="preset" |
		//reference=[behaviortree::BehaviorTree|QualifiedName]) ('affects' (impacts+=ImpactOnQuality | '{'
		//(impacts+=ImpactOnQuality (',' impacts+=ImpactOnQuality)*)? '}'))?
		public Group getGroup() { return cGroup; }
		
		//{mirondatatypes::BehaviorTreeLiteral}
		public Action getBehaviorTreeLiteralAction_0() { return cBehaviorTreeLiteralAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//preset?="preset" | reference=[behaviortree::BehaviorTree|QualifiedName]
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//preset?="preset"
		public Assignment getPresetAssignment_3_0() { return cPresetAssignment_3_0; }
		
		//"preset"
		public Keyword getPresetPresetKeyword_3_0_0() { return cPresetPresetKeyword_3_0_0; }
		
		//reference=[behaviortree::BehaviorTree|QualifiedName]
		public Assignment getReferenceAssignment_3_1() { return cReferenceAssignment_3_1; }
		
		//[behaviortree::BehaviorTree|QualifiedName]
		public CrossReference getReferenceBehaviorTreeCrossReference_3_1_0() { return cReferenceBehaviorTreeCrossReference_3_1_0; }
		
		//QualifiedName
		public RuleCall getReferenceBehaviorTreeQualifiedNameParserRuleCall_3_1_0_1() { return cReferenceBehaviorTreeQualifiedNameParserRuleCall_3_1_0_1; }
		
		//('affects' (impacts+=ImpactOnQuality | '{' (impacts+=ImpactOnQuality (',' impacts+=ImpactOnQuality)*)? '}'))?
		public Group getGroup_4() { return cGroup_4; }
		
		//'affects'
		public Keyword getAffectsKeyword_4_0() { return cAffectsKeyword_4_0; }
		
		//impacts+=ImpactOnQuality | '{' (impacts+=ImpactOnQuality (',' impacts+=ImpactOnQuality)*)? '}'
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }
		
		//impacts+=ImpactOnQuality
		public Assignment getImpactsAssignment_4_1_0() { return cImpactsAssignment_4_1_0; }
		
		//ImpactOnQuality
		public RuleCall getImpactsImpactOnQualityParserRuleCall_4_1_0_0() { return cImpactsImpactOnQualityParserRuleCall_4_1_0_0; }
		
		//'{' (impacts+=ImpactOnQuality (',' impacts+=ImpactOnQuality)*)? '}'
		public Group getGroup_4_1_1() { return cGroup_4_1_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1_1_0() { return cLeftCurlyBracketKeyword_4_1_1_0; }
		
		//(impacts+=ImpactOnQuality (',' impacts+=ImpactOnQuality)*)?
		public Group getGroup_4_1_1_1() { return cGroup_4_1_1_1; }
		
		//impacts+=ImpactOnQuality
		public Assignment getImpactsAssignment_4_1_1_1_0() { return cImpactsAssignment_4_1_1_1_0; }
		
		//ImpactOnQuality
		public RuleCall getImpactsImpactOnQualityParserRuleCall_4_1_1_1_0_0() { return cImpactsImpactOnQualityParserRuleCall_4_1_1_1_0_0; }
		
		//(',' impacts+=ImpactOnQuality)*
		public Group getGroup_4_1_1_1_1() { return cGroup_4_1_1_1_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_1_1_1_0() { return cCommaKeyword_4_1_1_1_1_0; }
		
		//impacts+=ImpactOnQuality
		public Assignment getImpactsAssignment_4_1_1_1_1_1() { return cImpactsAssignment_4_1_1_1_1_1; }
		
		//ImpactOnQuality
		public RuleCall getImpactsImpactOnQualityParserRuleCall_4_1_1_1_1_1_0() { return cImpactsImpactOnQualityParserRuleCall_4_1_1_1_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_1_1_2() { return cRightCurlyBracketKeyword_4_1_1_2; }
	}
	public class ImpactOnQualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.miron.MIRoN.ImpactOnQuality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cPropertyPropertyCrossReference_0_0 = (CrossReference)cPropertyAssignment_0.eContents().get(0);
		private final RuleCall cPropertyPropertyQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cPropertyPropertyCrossReference_0_0.eContents().get(1);
		private final Assignment cIntensityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIntensityImpactIntensityEnumEnumRuleCall_1_0 = (RuleCall)cIntensityAssignment_1.eContents().get(0);
		
		//ImpactOnQuality mirondatatypes::ImpactOnQuality:
		//	property=[roqmekernel::Property|QualifiedName] intensity=ImpactIntensityEnum;
		@Override public ParserRule getRule() { return rule; }
		
		//property=[roqmekernel::Property|QualifiedName] intensity=ImpactIntensityEnum
		public Group getGroup() { return cGroup; }
		
		//property=[roqmekernel::Property|QualifiedName]
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }
		
		//[roqmekernel::Property|QualifiedName]
		public CrossReference getPropertyPropertyCrossReference_0_0() { return cPropertyPropertyCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getPropertyPropertyQualifiedNameParserRuleCall_0_0_1() { return cPropertyPropertyQualifiedNameParserRuleCall_0_0_1; }
		
		//intensity=ImpactIntensityEnum
		public Assignment getIntensityAssignment_1() { return cIntensityAssignment_1; }
		
		//ImpactIntensityEnum
		public RuleCall getIntensityImpactIntensityEnumEnumRuleCall_1_0() { return cIntensityImpactIntensityEnumEnumRuleCall_1_0; }
	}
	public class TypedVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.miron.MIRoN.TypedVariable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParameterParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTimerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGeneralPurposeVariableParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cContextParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBeliefVariableParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cVariationPointParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//@ Override TypedVariable roqmedatatypes::TypedVariable:
		//	Parameter | Timer | GeneralPurposeVariable | Context | BeliefVariable | VariationPoint;
		@Override public ParserRule getRule() { return rule; }
		
		//Parameter | Timer | GeneralPurposeVariable | Context | BeliefVariable | VariationPoint
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Parameter
		public RuleCall getParameterParserRuleCall_0() { return cParameterParserRuleCall_0; }
		
		//Timer
		public RuleCall getTimerParserRuleCall_1() { return cTimerParserRuleCall_1; }
		
		//GeneralPurposeVariable
		public RuleCall getGeneralPurposeVariableParserRuleCall_2() { return cGeneralPurposeVariableParserRuleCall_2; }
		
		//Context
		public RuleCall getContextParserRuleCall_3() { return cContextParserRuleCall_3; }
		
		//BeliefVariable
		public RuleCall getBeliefVariableParserRuleCall_4() { return cBeliefVariableParserRuleCall_4; }
		
		//VariationPoint
		public RuleCall getVariationPointParserRuleCall_5() { return cVariationPointParserRuleCall_5; }
	}
	public class VariationPointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.miron.MIRoN.VariationPoint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarpointKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDeclarationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDeclarationDataTypeDeclarationParserRuleCall_3_0 = (RuleCall)cDeclarationAssignment_3.eContents().get(0);
		private final Assignment cBindingAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBindingBindingParserRuleCall_4_0 = (RuleCall)cBindingAssignment_4.eContents().get(0);
		
		//VariationPoint mironkernel::VariationPoint:
		//	'varpoint' name=ID ':' declaration=DataTypeDeclaration
		//	binding=Binding?;
		@Override public ParserRule getRule() { return rule; }
		
		//'varpoint' name=ID ':' declaration=DataTypeDeclaration binding=Binding?
		public Group getGroup() { return cGroup; }
		
		//'varpoint'
		public Keyword getVarpointKeyword_0() { return cVarpointKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//declaration=DataTypeDeclaration
		public Assignment getDeclarationAssignment_3() { return cDeclarationAssignment_3; }
		
		//DataTypeDeclaration
		public RuleCall getDeclarationDataTypeDeclarationParserRuleCall_3_0() { return cDeclarationDataTypeDeclarationParserRuleCall_3_0; }
		
		//binding=Binding?
		public Assignment getBindingAssignment_4() { return cBindingAssignment_4; }
		
		//Binding
		public RuleCall getBindingBindingParserRuleCall_4_0() { return cBindingBindingParserRuleCall_4_0; }
	}
	public class BindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.miron.MIRoN.Binding");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBtBindingParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArchBindingParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Binding mironkernel::Binding:
		//	BtBinding | ArchBinding;
		@Override public ParserRule getRule() { return rule; }
		
		//BtBinding | ArchBinding
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BtBinding
		public RuleCall getBtBindingParserRuleCall_0() { return cBtBindingParserRuleCall_0; }
		
		//ArchBinding
		public RuleCall getArchBindingParserRuleCall_1() { return cArchBindingParserRuleCall_1; }
	}
	public class ArchBindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.miron.MIRoN.ArchBinding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cArchKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cParameterSetRepositoryKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cParameterSetRepositoryAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cParameterSetRepositoryEStringParserRuleCall_3_0_1_0 = (RuleCall)cParameterSetRepositoryAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cParameterSetKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParameterSetAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParameterSetEStringParserRuleCall_3_1_1_0 = (RuleCall)cParameterSetAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cUnorderedGroup_3.eContents().get(2);
		private final Keyword cComponentKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cComponentAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cComponentEStringParserRuleCall_3_2_1_0 = (RuleCall)cComponentAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cUnorderedGroup_3.eContents().get(3);
		private final Keyword cParameterKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cParameterAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cParameterEStringParserRuleCall_3_3_1_0 = (RuleCall)cParameterAssignment_3_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ArchBinding mironkernel::ArchBinding:
		//	'in' 'arch'
		//	'{' ('parameterSetRepository' parameterSetRepository=EString & 'parameterSet' parameterSet=EString & 'component'
		//	component=EString & 'parameter' parameter=EString)
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'in' 'arch' '{' ('parameterSetRepository' parameterSetRepository=EString & 'parameterSet' parameterSet=EString &
		//'component' component=EString & 'parameter' parameter=EString) '}'
		public Group getGroup() { return cGroup; }
		
		//'in'
		public Keyword getInKeyword_0() { return cInKeyword_0; }
		
		//'arch'
		public Keyword getArchKeyword_1() { return cArchKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'parameterSetRepository' parameterSetRepository=EString & 'parameterSet' parameterSet=EString & 'component'
		//component=EString & 'parameter' parameter=EString
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }
		
		//'parameterSetRepository' parameterSetRepository=EString
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'parameterSetRepository'
		public Keyword getParameterSetRepositoryKeyword_3_0_0() { return cParameterSetRepositoryKeyword_3_0_0; }
		
		//parameterSetRepository=EString
		public Assignment getParameterSetRepositoryAssignment_3_0_1() { return cParameterSetRepositoryAssignment_3_0_1; }
		
		//EString
		public RuleCall getParameterSetRepositoryEStringParserRuleCall_3_0_1_0() { return cParameterSetRepositoryEStringParserRuleCall_3_0_1_0; }
		
		//'parameterSet' parameterSet=EString
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'parameterSet'
		public Keyword getParameterSetKeyword_3_1_0() { return cParameterSetKeyword_3_1_0; }
		
		//parameterSet=EString
		public Assignment getParameterSetAssignment_3_1_1() { return cParameterSetAssignment_3_1_1; }
		
		//EString
		public RuleCall getParameterSetEStringParserRuleCall_3_1_1_0() { return cParameterSetEStringParserRuleCall_3_1_1_0; }
		
		//'component' component=EString
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//'component'
		public Keyword getComponentKeyword_3_2_0() { return cComponentKeyword_3_2_0; }
		
		//component=EString
		public Assignment getComponentAssignment_3_2_1() { return cComponentAssignment_3_2_1; }
		
		//EString
		public RuleCall getComponentEStringParserRuleCall_3_2_1_0() { return cComponentEStringParserRuleCall_3_2_1_0; }
		
		//'parameter' parameter=EString
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//'parameter'
		public Keyword getParameterKeyword_3_3_0() { return cParameterKeyword_3_3_0; }
		
		//parameter=EString
		public Assignment getParameterAssignment_3_3_1() { return cParameterAssignment_3_3_1; }
		
		//EString
		public RuleCall getParameterEStringParserRuleCall_3_3_1_0() { return cParameterEStringParserRuleCall_3_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class BtBindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.miron.MIRoN.BtBinding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInsertionTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInsertionTypeInsertionTypeEnumEnumRuleCall_0_0 = (RuleCall)cInsertionTypeAssignment_0.eContents().get(0);
		private final Assignment cXpathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cXpathEStringParserRuleCall_1_0 = (RuleCall)cXpathAssignment_1.eContents().get(0);
		private final Assignment cTargetsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTargetsEObjectCrossReference_2_0 = (CrossReference)cTargetsAssignment_2.eContents().get(0);
		private final RuleCall cTargetsEObjectQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cTargetsEObjectCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTargetsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cTargetsEObjectCrossReference_3_1_0 = (CrossReference)cTargetsAssignment_3_1.eContents().get(0);
		private final RuleCall cTargetsEObjectQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cTargetsEObjectCrossReference_3_1_0.eContents().get(1);
		
		//BtBinding mironkernel::BtBinding:
		//	insertionType=InsertionTypeEnum
		//	xpath=EString?
		//	targets+=[ecore::EObject|QualifiedName] (',' targets+=[ecore::EObject|QualifiedName])*;
		@Override public ParserRule getRule() { return rule; }
		
		//insertionType=InsertionTypeEnum xpath=EString? targets+=[ecore::EObject|QualifiedName] (','
		//targets+=[ecore::EObject|QualifiedName])*
		public Group getGroup() { return cGroup; }
		
		//insertionType=InsertionTypeEnum
		public Assignment getInsertionTypeAssignment_0() { return cInsertionTypeAssignment_0; }
		
		//InsertionTypeEnum
		public RuleCall getInsertionTypeInsertionTypeEnumEnumRuleCall_0_0() { return cInsertionTypeInsertionTypeEnumEnumRuleCall_0_0; }
		
		//xpath=EString?
		public Assignment getXpathAssignment_1() { return cXpathAssignment_1; }
		
		//EString
		public RuleCall getXpathEStringParserRuleCall_1_0() { return cXpathEStringParserRuleCall_1_0; }
		
		//targets+=[ecore::EObject|QualifiedName]
		public Assignment getTargetsAssignment_2() { return cTargetsAssignment_2; }
		
		//[ecore::EObject|QualifiedName]
		public CrossReference getTargetsEObjectCrossReference_2_0() { return cTargetsEObjectCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getTargetsEObjectQualifiedNameParserRuleCall_2_0_1() { return cTargetsEObjectQualifiedNameParserRuleCall_2_0_1; }
		
		//(',' targets+=[ecore::EObject|QualifiedName])*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//targets+=[ecore::EObject|QualifiedName]
		public Assignment getTargetsAssignment_3_1() { return cTargetsAssignment_3_1; }
		
		//[ecore::EObject|QualifiedName]
		public CrossReference getTargetsEObjectCrossReference_3_1_0() { return cTargetsEObjectCrossReference_3_1_0; }
		
		//QualifiedName
		public RuleCall getTargetsEObjectQualifiedNameParserRuleCall_3_1_0_1() { return cTargetsEObjectQualifiedNameParserRuleCall_3_1_0_1; }
	}
	public class SentenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.miron.MIRoN.Sentence");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cObservationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRuleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//@ Override Sentence roqmedatatypes::Sentence:
		//	Observation | Rule;
		@Override public ParserRule getRule() { return rule; }
		
		//Observation | Rule
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Observation
		public RuleCall getObservationParserRuleCall_0() { return cObservationParserRuleCall_0; }
		
		//Rule
		public RuleCall getRuleParserRuleCall_1() { return cRuleParserRuleCall_1; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.miron.MIRoN.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionConditionParserRuleCall_3_0 = (RuleCall)cConditionAssignment_3.eContents().get(0);
		private final Keyword cImpliesKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cImpliesAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cImpliesConstraintParserRuleCall_5_0_0 = (RuleCall)cImpliesAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cImpliesAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cImpliesConstraintParserRuleCall_5_1_1_0 = (RuleCall)cImpliesAssignment_5_1_1.eContents().get(0);
		private final Group cGroup_5_1_2 = (Group)cGroup_5_1.eContents().get(2);
		private final Keyword cCommaKeyword_5_1_2_0 = (Keyword)cGroup_5_1_2.eContents().get(0);
		private final Assignment cImpliesAssignment_5_1_2_1 = (Assignment)cGroup_5_1_2.eContents().get(1);
		private final RuleCall cImpliesConstraintParserRuleCall_5_1_2_1_0 = (RuleCall)cImpliesAssignment_5_1_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_1_3 = (Keyword)cGroup_5_1.eContents().get(3);
		
		//Rule mironkernel::Rule:
		//	'rule' name=ID ':' condition=Condition? 'implies' (implies+=Constraint | '{' implies+=Constraint (','
		//	implies+=Constraint)+ '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'rule' name=ID ':' condition=Condition? 'implies' (implies+=Constraint | '{' implies+=Constraint (','
		//implies+=Constraint)+ '}')
		public Group getGroup() { return cGroup; }
		
		//'rule'
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//condition=Condition?
		public Assignment getConditionAssignment_3() { return cConditionAssignment_3; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_3_0() { return cConditionConditionParserRuleCall_3_0; }
		
		//'implies'
		public Keyword getImpliesKeyword_4() { return cImpliesKeyword_4; }
		
		//implies+=Constraint | '{' implies+=Constraint (',' implies+=Constraint)+ '}'
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//implies+=Constraint
		public Assignment getImpliesAssignment_5_0() { return cImpliesAssignment_5_0; }
		
		//Constraint
		public RuleCall getImpliesConstraintParserRuleCall_5_0_0() { return cImpliesConstraintParserRuleCall_5_0_0; }
		
		//'{' implies+=Constraint (',' implies+=Constraint)+ '}'
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1_0() { return cLeftCurlyBracketKeyword_5_1_0; }
		
		//implies+=Constraint
		public Assignment getImpliesAssignment_5_1_1() { return cImpliesAssignment_5_1_1; }
		
		//Constraint
		public RuleCall getImpliesConstraintParserRuleCall_5_1_1_0() { return cImpliesConstraintParserRuleCall_5_1_1_0; }
		
		//(',' implies+=Constraint)+
		public Group getGroup_5_1_2() { return cGroup_5_1_2; }
		
		//','
		public Keyword getCommaKeyword_5_1_2_0() { return cCommaKeyword_5_1_2_0; }
		
		//implies+=Constraint
		public Assignment getImpliesAssignment_5_1_2_1() { return cImpliesAssignment_5_1_2_1; }
		
		//Constraint
		public RuleCall getImpliesConstraintParserRuleCall_5_1_2_1_0() { return cImpliesConstraintParserRuleCall_5_1_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_1_3() { return cRightCurlyBracketKeyword_5_1_3; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.miron.MIRoN.Condition");
		private final Assignment cTermAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTermTermParserRuleCall_0 = (RuleCall)cTermAssignment.eContents().get(0);
		
		//Condition mironkernel::Condition:
		//	term=Term;
		@Override public ParserRule getRule() { return rule; }
		
		//term=Term
		public Assignment getTermAssignment() { return cTermAssignment; }
		
		//Term
		public RuleCall getTermTermParserRuleCall_0() { return cTermTermParserRuleCall_0; }
	}
	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.miron.MIRoN.Constraint");
		private final Assignment cTermAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTermTermParserRuleCall_0 = (RuleCall)cTermAssignment.eContents().get(0);
		
		//Constraint mironkernel::Constraint:
		//	term=Term;
		@Override public ParserRule getRule() { return rule; }
		
		//term=Term
		public Assignment getTermAssignment() { return cTermAssignment; }
		
		//Term
		public RuleCall getTermTermParserRuleCall_0() { return cTermTermParserRuleCall_0; }
	}
	
	public class ImpactIntensityEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.miron.MIRoN.ImpactIntensityEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNEGATIVE_HIGHEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNEGATIVE_HIGHHyphenMinusHyphenMinusHyphenMinusKeyword_0_0 = (Keyword)cNEGATIVE_HIGHEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNEGATIVE_MEDIUMEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNEGATIVE_MEDIUMHyphenMinusHyphenMinusKeyword_1_0 = (Keyword)cNEGATIVE_MEDIUMEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNEGATIVE_LOWEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNEGATIVE_LOWHyphenMinusKeyword_2_0 = (Keyword)cNEGATIVE_LOWEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPOSITIVE_HIGHEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPOSITIVE_HIGHPlusSignPlusSignPlusSignKeyword_3_0 = (Keyword)cPOSITIVE_HIGHEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cPOSITIVE_MEDIUMEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cPOSITIVE_MEDIUMPlusSignPlusSignKeyword_4_0 = (Keyword)cPOSITIVE_MEDIUMEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cPOSITIVE_LOWEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cPOSITIVE_LOWPlusSignKeyword_5_0 = (Keyword)cPOSITIVE_LOWEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum ImpactIntensityEnum returns mirondatatypes::ImpactIntensityEnum:
		//	NEGATIVE_HIGH='---' | NEGATIVE_MEDIUM='--' | NEGATIVE_LOW='-' |
		//	POSITIVE_HIGH='+++' | POSITIVE_MEDIUM='++' | POSITIVE_LOW='+';
		public EnumRule getRule() { return rule; }
		
		//NEGATIVE_HIGH='---' | NEGATIVE_MEDIUM='--' | NEGATIVE_LOW='-' | POSITIVE_HIGH='+++' | POSITIVE_MEDIUM='++' |
		//POSITIVE_LOW='+'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NEGATIVE_HIGH='---'
		public EnumLiteralDeclaration getNEGATIVE_HIGHEnumLiteralDeclaration_0() { return cNEGATIVE_HIGHEnumLiteralDeclaration_0; }
		
		//'---'
		public Keyword getNEGATIVE_HIGHHyphenMinusHyphenMinusHyphenMinusKeyword_0_0() { return cNEGATIVE_HIGHHyphenMinusHyphenMinusHyphenMinusKeyword_0_0; }
		
		//NEGATIVE_MEDIUM='--'
		public EnumLiteralDeclaration getNEGATIVE_MEDIUMEnumLiteralDeclaration_1() { return cNEGATIVE_MEDIUMEnumLiteralDeclaration_1; }
		
		//'--'
		public Keyword getNEGATIVE_MEDIUMHyphenMinusHyphenMinusKeyword_1_0() { return cNEGATIVE_MEDIUMHyphenMinusHyphenMinusKeyword_1_0; }
		
		//NEGATIVE_LOW='-'
		public EnumLiteralDeclaration getNEGATIVE_LOWEnumLiteralDeclaration_2() { return cNEGATIVE_LOWEnumLiteralDeclaration_2; }
		
		//'-'
		public Keyword getNEGATIVE_LOWHyphenMinusKeyword_2_0() { return cNEGATIVE_LOWHyphenMinusKeyword_2_0; }
		
		//POSITIVE_HIGH='+++'
		public EnumLiteralDeclaration getPOSITIVE_HIGHEnumLiteralDeclaration_3() { return cPOSITIVE_HIGHEnumLiteralDeclaration_3; }
		
		//'+++'
		public Keyword getPOSITIVE_HIGHPlusSignPlusSignPlusSignKeyword_3_0() { return cPOSITIVE_HIGHPlusSignPlusSignPlusSignKeyword_3_0; }
		
		//POSITIVE_MEDIUM='++'
		public EnumLiteralDeclaration getPOSITIVE_MEDIUMEnumLiteralDeclaration_4() { return cPOSITIVE_MEDIUMEnumLiteralDeclaration_4; }
		
		//'++'
		public Keyword getPOSITIVE_MEDIUMPlusSignPlusSignKeyword_4_0() { return cPOSITIVE_MEDIUMPlusSignPlusSignKeyword_4_0; }
		
		//POSITIVE_LOW='+'
		public EnumLiteralDeclaration getPOSITIVE_LOWEnumLiteralDeclaration_5() { return cPOSITIVE_LOWEnumLiteralDeclaration_5; }
		
		//'+'
		public Keyword getPOSITIVE_LOWPlusSignKeyword_5_0() { return cPOSITIVE_LOWPlusSignKeyword_5_0; }
	}
	public class InsertionTypeEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.miron.MIRoN.InsertionTypeEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINInKeyword_0_0 = (Keyword)cINEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAFTEREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAFTERAfterKeyword_1_0 = (Keyword)cAFTEREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBEFOREEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBEFOREBeforeKeyword_2_0 = (Keyword)cBEFOREEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum InsertionTypeEnum returns mironkernel::InsertionTypeEnum:
		//	IN='in' | AFTER='after' | BEFORE='before';
		public EnumRule getRule() { return rule; }
		
		//IN='in' | AFTER='after' | BEFORE='before'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IN='in'
		public EnumLiteralDeclaration getINEnumLiteralDeclaration_0() { return cINEnumLiteralDeclaration_0; }
		
		//'in'
		public Keyword getINInKeyword_0_0() { return cINInKeyword_0_0; }
		
		//AFTER='after'
		public EnumLiteralDeclaration getAFTEREnumLiteralDeclaration_1() { return cAFTEREnumLiteralDeclaration_1; }
		
		//'after'
		public Keyword getAFTERAfterKeyword_1_0() { return cAFTERAfterKeyword_1_0; }
		
		//BEFORE='before'
		public EnumLiteralDeclaration getBEFOREEnumLiteralDeclaration_2() { return cBEFOREEnumLiteralDeclaration_2; }
		
		//'before'
		public Keyword getBEFOREBeforeKeyword_2_0() { return cBEFOREBeforeKeyword_2_0; }
	}
	
	private final MironModelElements pMironModel;
	private final ImportElements pImport;
	private final DataTypeElements pDataType;
	private final EnumTypeElements pEnumType;
	private final NumericSampledTypeElements pNumericSampledType;
	private final SampleValueElements pSampleValue;
	private final BehaviorTreeEnumTypeElements pBehaviorTreeEnumType;
	private final BehaviorTreeLiteralElements pBehaviorTreeLiteral;
	private final ImpactOnQualityElements pImpactOnQuality;
	private final ImpactIntensityEnumElements eImpactIntensityEnum;
	private final TypedVariableElements pTypedVariable;
	private final VariationPointElements pVariationPoint;
	private final BindingElements pBinding;
	private final ArchBindingElements pArchBinding;
	private final BtBindingElements pBtBinding;
	private final InsertionTypeEnumElements eInsertionTypeEnum;
	private final SentenceElements pSentence;
	private final RuleElements pRule;
	private final ConditionElements pCondition;
	private final ConstraintElements pConstraint;
	
	private final Grammar grammar;
	
	private final RoQMEGrammarAccess gaRoQME;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MIRoNGrammarAccess(GrammarProvider grammarProvider,
			RoQMEGrammarAccess gaRoQME,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaRoQME = gaRoQME;
		this.gaTerminals = gaTerminals;
		this.pMironModel = new MironModelElements();
		this.pImport = new ImportElements();
		this.pDataType = new DataTypeElements();
		this.pEnumType = new EnumTypeElements();
		this.pNumericSampledType = new NumericSampledTypeElements();
		this.pSampleValue = new SampleValueElements();
		this.pBehaviorTreeEnumType = new BehaviorTreeEnumTypeElements();
		this.pBehaviorTreeLiteral = new BehaviorTreeLiteralElements();
		this.pImpactOnQuality = new ImpactOnQualityElements();
		this.eImpactIntensityEnum = new ImpactIntensityEnumElements();
		this.pTypedVariable = new TypedVariableElements();
		this.pVariationPoint = new VariationPointElements();
		this.pBinding = new BindingElements();
		this.pArchBinding = new ArchBindingElements();
		this.pBtBinding = new BtBindingElements();
		this.eInsertionTypeEnum = new InsertionTypeEnumElements();
		this.pSentence = new SentenceElements();
		this.pRule = new RuleElements();
		this.pCondition = new ConditionElements();
		this.pConstraint = new ConstraintElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.miron.MIRoN".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public RoQMEGrammarAccess getRoQMEGrammarAccess() {
		return gaRoQME;
	}
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//MironModel mirondatatypes::MironModel:
	//	(description=ElementDescription? 'miron' namespace=EString)?
	//	sentences+=Import* (dataTypes+=DataTypeDefinition
	//	| variables+=TypedVariable
	//	| sentences+=Sentence)*;
	public MironModelElements getMironModelAccess() {
		return pMironModel;
	}
	
	public ParserRule getMironModelRule() {
		return getMironModelAccess().getRule();
	}
	
	//@ Override Import mironkernel::Import:
	//	'import' importURI=EString ('as' alias=EString)?;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//@ Override DataType roqmedatatypes::DataType:
	//	BooleanType | EnumType | EventType | NumericType | TimeType | NumericSampledType;
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	//@ Override EnumType roqmedatatypes::EnumType:
	//	BehaviorTreeEnumType | SimpleEnumType;
	public EnumTypeElements getEnumTypeAccess() {
		return pEnumType;
	}
	
	public ParserRule getEnumTypeRule() {
		return getEnumTypeAccess().getRule();
	}
	
	//NumericSampledType mirondatatypes::NumericSampledType:
	//	'number' ('[' cardinality=INT ']')? (('unit' measurementUnit=EString)?
	//	& ('(' constraints+=CompactLowerBound ':' constraints+=CompactPrecision ':' constraints+=CompactUpperBound ')' | '('
	//	constraints+=CompactLowerBound ':' constraints+=CompactUpperBound ')')?
	//	& constraints+=NumericTypeConstraint*)
	//	'{'
	//	samples+=SampleValue (',' samples+=SampleValue)*
	//	'}';
	public NumericSampledTypeElements getNumericSampledTypeAccess() {
		return pNumericSampledType;
	}
	
	public ParserRule getNumericSampledTypeRule() {
		return getNumericSampledTypeAccess().getRule();
	}
	
	//SampleValue mirondatatypes::SampleValue:
	//	value=NumericValue
	//	'affects' (impacts+=ImpactOnQuality | '{' (impacts+=ImpactOnQuality (',' impacts+=ImpactOnQuality)*)? '}');
	public SampleValueElements getSampleValueAccess() {
		return pSampleValue;
	}
	
	public ParserRule getSampleValueRule() {
		return getSampleValueAccess().getRule();
	}
	
	//BehaviorTreeEnumType mirondatatypes::BehaviorTreeEnumType:
	//	'enum' ('[' cardinality=INT ']')?
	//	'{'
	//	literals+=BehaviorTreeLiteral (',' literals+=BehaviorTreeLiteral)*
	//	'}';
	public BehaviorTreeEnumTypeElements getBehaviorTreeEnumTypeAccess() {
		return pBehaviorTreeEnumType;
	}
	
	public ParserRule getBehaviorTreeEnumTypeRule() {
		return getBehaviorTreeEnumTypeAccess().getRule();
	}
	
	//BehaviorTreeLiteral mirondatatypes::BehaviorTreeLiteral:
	//	{mirondatatypes::BehaviorTreeLiteral} name=ID ":" (preset?="preset" |
	//	reference=[behaviortree::BehaviorTree|QualifiedName]) ('affects' (impacts+=ImpactOnQuality | '{'
	//	(impacts+=ImpactOnQuality (',' impacts+=ImpactOnQuality)*)? '}'))?;
	public BehaviorTreeLiteralElements getBehaviorTreeLiteralAccess() {
		return pBehaviorTreeLiteral;
	}
	
	public ParserRule getBehaviorTreeLiteralRule() {
		return getBehaviorTreeLiteralAccess().getRule();
	}
	
	//ImpactOnQuality mirondatatypes::ImpactOnQuality:
	//	property=[roqmekernel::Property|QualifiedName] intensity=ImpactIntensityEnum;
	public ImpactOnQualityElements getImpactOnQualityAccess() {
		return pImpactOnQuality;
	}
	
	public ParserRule getImpactOnQualityRule() {
		return getImpactOnQualityAccess().getRule();
	}
	
	//enum ImpactIntensityEnum returns mirondatatypes::ImpactIntensityEnum:
	//	NEGATIVE_HIGH='---' | NEGATIVE_MEDIUM='--' | NEGATIVE_LOW='-' |
	//	POSITIVE_HIGH='+++' | POSITIVE_MEDIUM='++' | POSITIVE_LOW='+';
	public ImpactIntensityEnumElements getImpactIntensityEnumAccess() {
		return eImpactIntensityEnum;
	}
	
	public EnumRule getImpactIntensityEnumRule() {
		return getImpactIntensityEnumAccess().getRule();
	}
	
	//@ Override TypedVariable roqmedatatypes::TypedVariable:
	//	Parameter | Timer | GeneralPurposeVariable | Context | BeliefVariable | VariationPoint;
	public TypedVariableElements getTypedVariableAccess() {
		return pTypedVariable;
	}
	
	public ParserRule getTypedVariableRule() {
		return getTypedVariableAccess().getRule();
	}
	
	//VariationPoint mironkernel::VariationPoint:
	//	'varpoint' name=ID ':' declaration=DataTypeDeclaration
	//	binding=Binding?;
	public VariationPointElements getVariationPointAccess() {
		return pVariationPoint;
	}
	
	public ParserRule getVariationPointRule() {
		return getVariationPointAccess().getRule();
	}
	
	//Binding mironkernel::Binding:
	//	BtBinding | ArchBinding;
	public BindingElements getBindingAccess() {
		return pBinding;
	}
	
	public ParserRule getBindingRule() {
		return getBindingAccess().getRule();
	}
	
	//ArchBinding mironkernel::ArchBinding:
	//	'in' 'arch'
	//	'{' ('parameterSetRepository' parameterSetRepository=EString & 'parameterSet' parameterSet=EString & 'component'
	//	component=EString & 'parameter' parameter=EString)
	//	'}';
	public ArchBindingElements getArchBindingAccess() {
		return pArchBinding;
	}
	
	public ParserRule getArchBindingRule() {
		return getArchBindingAccess().getRule();
	}
	
	//BtBinding mironkernel::BtBinding:
	//	insertionType=InsertionTypeEnum
	//	xpath=EString?
	//	targets+=[ecore::EObject|QualifiedName] (',' targets+=[ecore::EObject|QualifiedName])*;
	public BtBindingElements getBtBindingAccess() {
		return pBtBinding;
	}
	
	public ParserRule getBtBindingRule() {
		return getBtBindingAccess().getRule();
	}
	
	//enum InsertionTypeEnum returns mironkernel::InsertionTypeEnum:
	//	IN='in' | AFTER='after' | BEFORE='before';
	public InsertionTypeEnumElements getInsertionTypeEnumAccess() {
		return eInsertionTypeEnum;
	}
	
	public EnumRule getInsertionTypeEnumRule() {
		return getInsertionTypeEnumAccess().getRule();
	}
	
	//@ Override Sentence roqmedatatypes::Sentence:
	//	Observation | Rule;
	public SentenceElements getSentenceAccess() {
		return pSentence;
	}
	
	public ParserRule getSentenceRule() {
		return getSentenceAccess().getRule();
	}
	
	//Rule mironkernel::Rule:
	//	'rule' name=ID ':' condition=Condition? 'implies' (implies+=Constraint | '{' implies+=Constraint (','
	//	implies+=Constraint)+ '}');
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//Condition mironkernel::Condition:
	//	term=Term;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//Constraint mironkernel::Constraint:
	//	term=Term;
	public ConstraintElements getConstraintAccess() {
		return pConstraint;
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}
	
	//RoqmeModel datatypes::RoqmeModel:
	//	(description=ElementDescription? 'roqme' namespace=EString)?
	//	sentences+=super::Import* (dataTypes+=DataTypeDefinition
	//	| variables+=super::TypedVariable
	//	| sentences+=super::Sentence)*;
	public RoQMEGrammarAccess.RoqmeModelElements getRoqmeModelAccess() {
		return gaRoQME.getRoqmeModelAccess();
	}
	
	public ParserRule getRoqmeModelRule() {
		return getRoqmeModelAccess().getRule();
	}
	
	//Context kernel::Context:
	//	DerivedContext | PrimitiveContext;
	public RoQMEGrammarAccess.ContextElements getContextAccess() {
		return gaRoQME.getContextAccess();
	}
	
	public ParserRule getContextRule() {
		return getContextAccess().getRule();
	}
	
	//PrimitiveContext kernel::PrimitiveContext:
	//	description=ElementDescription?
	//	'context' name=ID ':' declaration=DataTypeDeclaration;
	public RoQMEGrammarAccess.PrimitiveContextElements getPrimitiveContextAccess() {
		return gaRoQME.getPrimitiveContextAccess();
	}
	
	public ParserRule getPrimitiveContextRule() {
		return getPrimitiveContextAccess().getRule();
	}
	
	//DerivedContext kernel::DerivedContext:
	//	description=ElementDescription?
	//	'context' name=ID ':' declaration=DataTypeDeclaration
	//	':=' definition=ContextPattern;
	public RoQMEGrammarAccess.DerivedContextElements getDerivedContextAccess() {
		return gaRoQME.getDerivedContextAccess();
	}
	
	public ParserRule getDerivedContextRule() {
		return getDerivedContextAccess().getRule();
	}
	
	//GeneralPurposeVariable kernel::GeneralPurposeVariable:
	//	'var' name=ID ':' declaration=DataTypeDeclaration (':=' definition=GeneralExpression);
	public RoQMEGrammarAccess.GeneralPurposeVariableElements getGeneralPurposeVariableAccess() {
		return gaRoQME.getGeneralPurposeVariableAccess();
	}
	
	public ParserRule getGeneralPurposeVariableRule() {
		return getGeneralPurposeVariableAccess().getRule();
	}
	
	//Parameter kernel::Parameter:
	//	description=ElementDescription?
	//	'param' name=ID ':' declaration=DataTypeDeclaration ('default' initializedTo=TypedValue)?;
	public RoQMEGrammarAccess.ParameterElements getParameterAccess() {
		return gaRoQME.getParameterAccess();
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//Timer kernel::Timer:
	//	'timer' name=ID declaration=InbuiltDeclaration (('offset' offset=TimeValue)?
	//	& once?='onetime'?
	//	& paused?='paused'?
	//	& ':=' definition=GeneralExpression);
	public RoQMEGrammarAccess.TimerElements getTimerAccess() {
		return gaRoQME.getTimerAccess();
	}
	
	public ParserRule getTimerRule() {
		return getTimerAccess().getRule();
	}
	
	//BeliefVariable kernel::BeliefVariable:
	//	BeliefVariableImpl | Property;
	public RoQMEGrammarAccess.BeliefVariableElements getBeliefVariableAccess() {
		return gaRoQME.getBeliefVariableAccess();
	}
	
	public ParserRule getBeliefVariableRule() {
		return getBeliefVariableAccess().getRule();
	}
	
	//BeliefVariableImpl kernel::BeliefVariable:
	//	description=ElementDescription?
	//	'beliefvar' name=ID declaration=InbuiltDeclaration (('reference' reference=EDouble)? & ('survival'
	//	survival=TimeValue)?);
	public RoQMEGrammarAccess.BeliefVariableImplElements getBeliefVariableImplAccess() {
		return gaRoQME.getBeliefVariableImplAccess();
	}
	
	public ParserRule getBeliefVariableImplRule() {
		return getBeliefVariableImplAccess().getRule();
	}
	
	//Property kernel::Property:
	//	description=ElementDescription?
	//	'property' name=ID (':' declaration=DataTypeDeclaration ':=' transformation=OutputTransformation |
	//	declaration=InbuiltDeclaration) (('reference' reference=EDouble)?
	//	& ('survival' survival=TimeValue)?);
	public RoQMEGrammarAccess.PropertyElements getPropertyAccess() {
		return gaRoQME.getPropertyAccess();
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}
	
	//Observation kernel::Observation:
	//	description=ElementDescription?
	//	'observation' name=ID ':' pattern=ContextPattern (actions+=Action | '{' actions+=Action+ '}');
	public RoQMEGrammarAccess.ObservationElements getObservationAccess() {
		return gaRoQME.getObservationAccess();
	}
	
	public ParserRule getObservationRule() {
		return getObservationAccess().getRule();
	}
	
	//Action kernel::Action:
	//	SetVariable | ClearEvidence | SetEvidence | TimerAction;
	public RoQMEGrammarAccess.ActionElements getActionAccess() {
		return gaRoQME.getActionAccess();
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//TimerAction kernel::TimerAction:
	//	StartTimer | StopTimer | ResumeTimer;
	public RoQMEGrammarAccess.TimerActionElements getTimerActionAccess() {
		return gaRoQME.getTimerActionAccess();
	}
	
	public ParserRule getTimerActionRule() {
		return getTimerActionAccess().getRule();
	}
	
	//SetVariable kernel::SetVariable:
	//	'sets' variable=[datatypes::TypedVariable|QualifiedName]
	//	':=' expression=GeneralExpression;
	public RoQMEGrammarAccess.SetVariableElements getSetVariableAccess() {
		return gaRoQME.getSetVariableAccess();
	}
	
	public ParserRule getSetVariableRule() {
		return getSetVariableAccess().getRule();
	}
	
	//ClearEvidence kernel::ClearEvidence:
	//	'clears' target=[kernel::BeliefVariable|QualifiedName];
	public RoQMEGrammarAccess.ClearEvidenceElements getClearEvidenceAccess() {
		return gaRoQME.getClearEvidenceAccess();
	}
	
	public ParserRule getClearEvidenceRule() {
		return getClearEvidenceAccess().getRule();
	}
	
	//SetEvidence kernel::SetEvidence:
	//	influence=InfluenceEnum
	//	target=[kernel::BeliefVariable|QualifiedName] (strength=StrengthEnum? & ('survival' survival=TimeValue)?);
	public RoQMEGrammarAccess.SetEvidenceElements getSetEvidenceAccess() {
		return gaRoQME.getSetEvidenceAccess();
	}
	
	public ParserRule getSetEvidenceRule() {
		return getSetEvidenceAccess().getRule();
	}
	
	//enum InfluenceEnum returns kernel::InfluenceEnum:
	//	REINFORCE='reinforces' | UNDERMINE='undermines';
	public RoQMEGrammarAccess.InfluenceEnumElements getInfluenceEnumAccess() {
		return gaRoQME.getInfluenceEnumAccess();
	}
	
	public EnumRule getInfluenceEnumRule() {
		return getInfluenceEnumAccess().getRule();
	}
	
	//enum StrengthEnum returns kernel::StrengthEnum:
	//	VERY_HIGH='veryhigh' | HIGH='high' | MEDIUM | LOW='low' | VERY_LOW='verylow';
	public RoQMEGrammarAccess.StrengthEnumElements getStrengthEnumAccess() {
		return gaRoQME.getStrengthEnumAccess();
	}
	
	public EnumRule getStrengthEnumRule() {
		return getStrengthEnumAccess().getRule();
	}
	
	//StartTimer kernel::StartTimer:
	//	'starts' timer=[kernel::Timer|QualifiedName];
	public RoQMEGrammarAccess.StartTimerElements getStartTimerAccess() {
		return gaRoQME.getStartTimerAccess();
	}
	
	public ParserRule getStartTimerRule() {
		return getStartTimerAccess().getRule();
	}
	
	//StopTimer kernel::StopTimer:
	//	'stops' timer=[kernel::Timer|QualifiedName];
	public RoQMEGrammarAccess.StopTimerElements getStopTimerAccess() {
		return gaRoQME.getStopTimerAccess();
	}
	
	public ParserRule getStopTimerRule() {
		return getStopTimerAccess().getRule();
	}
	
	//ResumeTimer kernel::ResumeTimer:
	//	'resumes' timer=[kernel::Timer|QualifiedName];
	public RoQMEGrammarAccess.ResumeTimerElements getResumeTimerAccess() {
		return gaRoQME.getResumeTimerAccess();
	}
	
	public ParserRule getResumeTimerRule() {
		return getResumeTimerAccess().getRule();
	}
	
	///* *********************************
	// * DATATYPE EPACKAGE
	// * *********************************/ /* 
	// * Data type definitions
	// */ DataTypeDefinition datatypes::DataTypeDefinition:
	//	'type' name=EString ':' dataType=super::DataType;
	public RoQMEGrammarAccess.DataTypeDefinitionElements getDataTypeDefinitionAccess() {
		return gaRoQME.getDataTypeDefinitionAccess();
	}
	
	public ParserRule getDataTypeDefinitionRule() {
		return getDataTypeDefinitionAccess().getRule();
	}
	
	//BooleanType datatypes::BooleanType:
	//	{datatypes::BooleanType}
	//	'boolean' ('[' cardinality=INT ']')?;
	public RoQMEGrammarAccess.BooleanTypeElements getBooleanTypeAccess() {
		return gaRoQME.getBooleanTypeAccess();
	}
	
	public ParserRule getBooleanTypeRule() {
		return getBooleanTypeAccess().getRule();
	}
	
	//SimpleEnumType datatypes::SimpleEnumType:
	//	'enum' ('[' cardinality=INT ']')?
	//	'{'
	//	literals+=SimpleEnumLiteral (',' literals+=SimpleEnumLiteral)+
	//	'}';
	public RoQMEGrammarAccess.SimpleEnumTypeElements getSimpleEnumTypeAccess() {
		return gaRoQME.getSimpleEnumTypeAccess();
	}
	
	public ParserRule getSimpleEnumTypeRule() {
		return getSimpleEnumTypeAccess().getRule();
	}
	
	//SimpleEnumLiteral datatypes::SimpleEnumLiteral:
	//	{datatypes::SimpleEnumLiteral} name=ID;
	public RoQMEGrammarAccess.SimpleEnumLiteralElements getSimpleEnumLiteralAccess() {
		return gaRoQME.getSimpleEnumLiteralAccess();
	}
	
	public ParserRule getSimpleEnumLiteralRule() {
		return getSimpleEnumLiteralAccess().getRule();
	}
	
	//EventType datatypes::EventType:
	//	{datatypes::EventType}
	//	'eventtype' ('[' cardinality=INT ']')?;
	public RoQMEGrammarAccess.EventTypeElements getEventTypeAccess() {
		return gaRoQME.getEventTypeAccess();
	}
	
	public ParserRule getEventTypeRule() {
		return getEventTypeAccess().getRule();
	}
	
	//NumericType datatypes::NumericType:
	//	{datatypes::NumericType}
	//	'number' ('[' cardinality=INT ']')? (('unit' measurementUnit=EString)?
	//	& ('(' constraints+=CompactLowerBound ':' constraints+=CompactPrecision ':' constraints+=CompactUpperBound ')' | '('
	//	constraints+=CompactLowerBound ':' constraints+=CompactUpperBound ')')?
	//	& constraints+=NumericTypeConstraint*);
	public RoQMEGrammarAccess.NumericTypeElements getNumericTypeAccess() {
		return gaRoQME.getNumericTypeAccess();
	}
	
	public ParserRule getNumericTypeRule() {
		return getNumericTypeAccess().getRule();
	}
	
	//NumericTypeConstraint datatypes::NumericTypeConstraint:
	//	LowerBound | UpperBound | Precision;
	public RoQMEGrammarAccess.NumericTypeConstraintElements getNumericTypeConstraintAccess() {
		return gaRoQME.getNumericTypeConstraintAccess();
	}
	
	public ParserRule getNumericTypeConstraintRule() {
		return getNumericTypeConstraintAccess().getRule();
	}
	
	//LowerBound datatypes::LowerBound:
	//	'lower' value=EDouble;
	public RoQMEGrammarAccess.LowerBoundElements getLowerBoundAccess() {
		return gaRoQME.getLowerBoundAccess();
	}
	
	public ParserRule getLowerBoundRule() {
		return getLowerBoundAccess().getRule();
	}
	
	//UpperBound datatypes::UpperBound:
	//	'upper' value=EDouble;
	public RoQMEGrammarAccess.UpperBoundElements getUpperBoundAccess() {
		return gaRoQME.getUpperBoundAccess();
	}
	
	public ParserRule getUpperBoundRule() {
		return getUpperBoundAccess().getRule();
	}
	
	//Precision datatypes::Precision:
	//	'precision' value=EDouble;
	public RoQMEGrammarAccess.PrecisionElements getPrecisionAccess() {
		return gaRoQME.getPrecisionAccess();
	}
	
	public ParserRule getPrecisionRule() {
		return getPrecisionAccess().getRule();
	}
	
	//CompactLowerBound datatypes::LowerBound:
	//	value=EDouble;
	public RoQMEGrammarAccess.CompactLowerBoundElements getCompactLowerBoundAccess() {
		return gaRoQME.getCompactLowerBoundAccess();
	}
	
	public ParserRule getCompactLowerBoundRule() {
		return getCompactLowerBoundAccess().getRule();
	}
	
	//CompactUpperBound datatypes::UpperBound:
	//	value=EDouble;
	public RoQMEGrammarAccess.CompactUpperBoundElements getCompactUpperBoundAccess() {
		return gaRoQME.getCompactUpperBoundAccess();
	}
	
	public ParserRule getCompactUpperBoundRule() {
		return getCompactUpperBoundAccess().getRule();
	}
	
	//CompactPrecision datatypes::Precision:
	//	value=EDouble;
	public RoQMEGrammarAccess.CompactPrecisionElements getCompactPrecisionAccess() {
		return gaRoQME.getCompactPrecisionAccess();
	}
	
	public ParserRule getCompactPrecisionRule() {
		return getCompactPrecisionAccess().getRule();
	}
	
	//TimeType datatypes::TimeType:
	//	{datatypes::TimeType}
	//	'time' ('[' cardinality=INT ']')?
	//	constraints+=NumericTypeConstraint*;
	public RoQMEGrammarAccess.TimeTypeElements getTimeTypeAccess() {
		return gaRoQME.getTimeTypeAccess();
	}
	
	public ParserRule getTimeTypeRule() {
		return getTimeTypeAccess().getRule();
	}
	
	///*
	// * Typed Values
	// */ TypedValue datatypes::TypedValue:
	//	SingleValue | ArrayValue;
	public RoQMEGrammarAccess.TypedValueElements getTypedValueAccess() {
		return gaRoQME.getTypedValueAccess();
	}
	
	public ParserRule getTypedValueRule() {
		return getTypedValueAccess().getRule();
	}
	
	//SingleValue datatypes::SingleValue:
	//	BooleanValue | EnumValue | NumericValue | EventValue;
	public RoQMEGrammarAccess.SingleValueElements getSingleValueAccess() {
		return gaRoQME.getSingleValueAccess();
	}
	
	public ParserRule getSingleValueRule() {
		return getSingleValueAccess().getRule();
	}
	
	//EventValue datatypes::EventValue:
	//	{datatypes::EventValue}
	//	'event';
	public RoQMEGrammarAccess.EventValueElements getEventValueAccess() {
		return gaRoQME.getEventValueAccess();
	}
	
	public ParserRule getEventValueRule() {
		return getEventValueAccess().getRule();
	}
	
	//BooleanValue datatypes::BooleanValue:
	//	{datatypes::BooleanValue} value=EBoolean;
	public RoQMEGrammarAccess.BooleanValueElements getBooleanValueAccess() {
		return gaRoQME.getBooleanValueAccess();
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}
	
	//EnumValue datatypes::EnumValue:
	//	{datatypes::EnumValue} value=[datatypes::EnumLiteral|LiteralQualifiedName];
	public RoQMEGrammarAccess.EnumValueElements getEnumValueAccess() {
		return gaRoQME.getEnumValueAccess();
	}
	
	public ParserRule getEnumValueRule() {
		return getEnumValueAccess().getRule();
	}
	
	//NumericValue datatypes::NumericValue:
	//	NumericValue_Impl | TimeValue;
	public RoQMEGrammarAccess.NumericValueElements getNumericValueAccess() {
		return gaRoQME.getNumericValueAccess();
	}
	
	public ParserRule getNumericValueRule() {
		return getNumericValueAccess().getRule();
	}
	
	//NumericValue_Impl datatypes::NumericValue:
	//	{datatypes::NumericValue} value=EDouble measurementUnit=EString?;
	public RoQMEGrammarAccess.NumericValue_ImplElements getNumericValue_ImplAccess() {
		return gaRoQME.getNumericValue_ImplAccess();
	}
	
	public ParserRule getNumericValue_ImplRule() {
		return getNumericValue_ImplAccess().getRule();
	}
	
	//TimeValue datatypes::TimeValue:
	//	{datatypes::TimeValue} value=EDouble measurementUnit=TimeUnitEnum;
	public RoQMEGrammarAccess.TimeValueElements getTimeValueAccess() {
		return gaRoQME.getTimeValueAccess();
	}
	
	public ParserRule getTimeValueRule() {
		return getTimeValueAccess().getRule();
	}
	
	//TimeUnitEnum:
	//	'milliseconds' | 'seconds' | 'minutes' | 'hours' | 'days'
	//	| 'millisecond' | 'second' | 'minute' | 'hour' | 'day';
	public RoQMEGrammarAccess.TimeUnitEnumElements getTimeUnitEnumAccess() {
		return gaRoQME.getTimeUnitEnumAccess();
	}
	
	public ParserRule getTimeUnitEnumRule() {
		return getTimeUnitEnumAccess().getRule();
	}
	
	//ArrayValue datatypes::ArrayValue:
	//	NumericArray | BooleanArray | EnumArray;
	public RoQMEGrammarAccess.ArrayValueElements getArrayValueAccess() {
		return gaRoQME.getArrayValueAccess();
	}
	
	public ParserRule getArrayValueRule() {
		return getArrayValueAccess().getRule();
	}
	
	//BooleanArray datatypes::ArrayValue:
	//	'[' values+=BooleanValue (',' values+=BooleanValue)* ']';
	public RoQMEGrammarAccess.BooleanArrayElements getBooleanArrayAccess() {
		return gaRoQME.getBooleanArrayAccess();
	}
	
	public ParserRule getBooleanArrayRule() {
		return getBooleanArrayAccess().getRule();
	}
	
	//EnumArray datatypes::ArrayValue:
	//	'[' values+=EnumValue (',' values+=EnumValue)* ']';
	public RoQMEGrammarAccess.EnumArrayElements getEnumArrayAccess() {
		return gaRoQME.getEnumArrayAccess();
	}
	
	public ParserRule getEnumArrayRule() {
		return getEnumArrayAccess().getRule();
	}
	
	//NumericArray datatypes::ArrayValue:
	//	NumericArray_Impl | TimeArray;
	public RoQMEGrammarAccess.NumericArrayElements getNumericArrayAccess() {
		return gaRoQME.getNumericArrayAccess();
	}
	
	public ParserRule getNumericArrayRule() {
		return getNumericArrayAccess().getRule();
	}
	
	//NumericArray_Impl datatypes::ArrayValue:
	//	'[' values+=NumericValue_Impl (',' values+=NumericValue_Impl)* ']';
	public RoQMEGrammarAccess.NumericArray_ImplElements getNumericArray_ImplAccess() {
		return gaRoQME.getNumericArray_ImplAccess();
	}
	
	public ParserRule getNumericArray_ImplRule() {
		return getNumericArray_ImplAccess().getRule();
	}
	
	//TimeArray datatypes::ArrayValue:
	//	'[' values+=TimeValue (',' values+=TimeValue)* ']';
	public RoQMEGrammarAccess.TimeArrayElements getTimeArrayAccess() {
		return gaRoQME.getTimeArrayAccess();
	}
	
	public ParserRule getTimeArrayRule() {
		return getTimeArrayAccess().getRule();
	}
	
	///*
	// * Typed Variables
	// */ DataTypeDeclaration datatypes::DataTypeDeclaration:
	//	InbuiltDeclaration | ReferencedDeclaration | ContainedDeclaration;
	public RoQMEGrammarAccess.DataTypeDeclarationElements getDataTypeDeclarationAccess() {
		return gaRoQME.getDataTypeDeclarationAccess();
	}
	
	public ParserRule getDataTypeDeclarationRule() {
		return getDataTypeDeclarationAccess().getRule();
	}
	
	//ContainedDeclaration datatypes::ContainedDeclaration:
	//	type=super::DataType;
	public RoQMEGrammarAccess.ContainedDeclarationElements getContainedDeclarationAccess() {
		return gaRoQME.getContainedDeclarationAccess();
	}
	
	public ParserRule getContainedDeclarationRule() {
		return getContainedDeclarationAccess().getRule();
	}
	
	//InbuiltDeclaration datatypes::InbuiltDeclaration:
	//	{datatypes::InbuiltDeclaration};
	public RoQMEGrammarAccess.InbuiltDeclarationElements getInbuiltDeclarationAccess() {
		return gaRoQME.getInbuiltDeclarationAccess();
	}
	
	public ParserRule getInbuiltDeclarationRule() {
		return getInbuiltDeclarationAccess().getRule();
	}
	
	//ReferencedDeclaration datatypes::ReferencedDeclaration:
	//	type=[datatypes::DataTypeDefinition];
	public RoQMEGrammarAccess.ReferencedDeclarationElements getReferencedDeclarationAccess() {
		return gaRoQME.getReferencedDeclarationAccess();
	}
	
	public ParserRule getReferencedDeclarationRule() {
		return getReferencedDeclarationAccess().getRule();
	}
	
	///* *********************************
	// * EXPRESSIONS EPACKAGE
	// * *********************************/ GeneralExpression expressions::GeneralExpression:
	//	term=Term;
	public RoQMEGrammarAccess.GeneralExpressionElements getGeneralExpressionAccess() {
		return gaRoQME.getGeneralExpressionAccess();
	}
	
	public ParserRule getGeneralExpressionRule() {
		return getGeneralExpressionAccess().getRule();
	}
	
	//OutputTransformation expressions::OutputTransformation:
	//	term=Term;
	public RoQMEGrammarAccess.OutputTransformationElements getOutputTransformationAccess() {
		return gaRoQME.getOutputTransformationAccess();
	}
	
	public ParserRule getOutputTransformationRule() {
		return getOutputTransformationAccess().getRule();
	}
	
	//ContextPattern expressions::ContextPattern:
	//	term=Term;
	public RoQMEGrammarAccess.ContextPatternElements getContextPatternAccess() {
		return gaRoQME.getContextPatternAccess();
	}
	
	public ParserRule getContextPatternRule() {
		return getContextPatternAccess().getRule();
	}
	
	//Term expressions::Term:
	//	OnceTerm | WhileTerm;
	public RoQMEGrammarAccess.TermElements getTermAccess() {
		return gaRoQME.getTermAccess();
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}
	
	///*
	// * Event Pattern Operators
	// */ //OnceTerm returns expressions::Term:
	////	WhileTerm
	////	('once' {expressions::OnceTerm.term=current})?;
	//OnceTerm expressions::OnceTerm:
	//	'once' term=WhileTerm;
	public RoQMEGrammarAccess.OnceTermElements getOnceTermAccess() {
		return gaRoQME.getOnceTermAccess();
	}
	
	public ParserRule getOnceTermRule() {
		return getOnceTermAccess().getRule();
	}
	
	//WhileTerm expressions::Term:
	//	RepetionTerm ({expressions::WhileTerm.left=current} 'while' '(' right=OrBooleanTerm ')')?;
	public RoQMEGrammarAccess.WhileTermElements getWhileTermAccess() {
		return gaRoQME.getWhileTermAccess();
	}
	
	public ParserRule getWhileTermRule() {
		return getWhileTermAccess().getRule();
	}
	
	//RepetionTerm expressions::Term:
	//	SequenceTerm ({expressions::RepeatTerm.term=current} 'repeat' '(' nrep=INT ')' | {expressions::RangeTerm.term=current}
	//	'range' '(' lowerBound=INT ',' upperBound=INT ')')?;
	public RoQMEGrammarAccess.RepetionTermElements getRepetionTermAccess() {
		return gaRoQME.getRepetionTermAccess();
	}
	
	public ParserRule getRepetionTermRule() {
		return getRepetionTermAccess().getRule();
	}
	
	//SequenceTerm expressions::Term:
	//	OrEventTerm ({expressions::FollowedByTerm.left=current} '->'
	//	right=ConditionalTerm)*;
	public RoQMEGrammarAccess.SequenceTermElements getSequenceTermAccess() {
		return gaRoQME.getSequenceTermAccess();
	}
	
	public ParserRule getSequenceTermRule() {
		return getSequenceTermAccess().getRule();
	}
	
	//OrEventTerm expressions::Term:
	//	AndEventTerm ({expressions::OrEventTerm.left=current} 'or' right=AndEventTerm)*;
	public RoQMEGrammarAccess.OrEventTermElements getOrEventTermAccess() {
		return gaRoQME.getOrEventTermAccess();
	}
	
	public ParserRule getOrEventTermRule() {
		return getOrEventTermAccess().getRule();
	}
	
	//AndEventTerm expressions::Term:
	//	(NotEventTerm | ConditionalTerm) ({expressions::AndEventTerm.left=current} 'and' right=(NotEventTerm |
	//	ConditionalTerm))*;
	public RoQMEGrammarAccess.AndEventTermElements getAndEventTermAccess() {
		return gaRoQME.getAndEventTermAccess();
	}
	
	public ParserRule getAndEventTermRule() {
		return getAndEventTermAccess().getRule();
	}
	
	//NotEventTerm expressions::Term:
	//	{expressions::NotEventTerm}
	//	'not' term=ConditionalTerm;
	public RoQMEGrammarAccess.NotEventTermElements getNotEventTermAccess() {
		return gaRoQME.getNotEventTermAccess();
	}
	
	public ParserRule getNotEventTermRule() {
		return getNotEventTermAccess().getRule();
	}
	
	///*
	// * Conditional Operator 
	// */ ConditionalTerm expressions::Term:
	//	OrBooleanTerm ({expressions::ConditionalTerm.terms+=current} '?' terms+=OrBooleanTerm ':' terms+=ConditionalTerm)?;
	public RoQMEGrammarAccess.ConditionalTermElements getConditionalTermAccess() {
		return gaRoQME.getConditionalTermAccess();
	}
	
	public ParserRule getConditionalTermRule() {
		return getConditionalTermAccess().getRule();
	}
	
	///*
	// * Logical Terms
	// */ OrBooleanTerm expressions::Term:
	//	AndBooleanTerm ({expressions::OrBooleanTerm.left=current} '|' right=AndBooleanTerm)*;
	public RoQMEGrammarAccess.OrBooleanTermElements getOrBooleanTermAccess() {
		return gaRoQME.getOrBooleanTermAccess();
	}
	
	public ParserRule getOrBooleanTermRule() {
		return getOrBooleanTermAccess().getRule();
	}
	
	//AndBooleanTerm expressions::Term:
	//	(NotBooleanTerm | RelationalTerm) ({expressions::AndBooleanTerm.left=current} '&' right=(NotBooleanTerm |
	//	RelationalTerm))*;
	public RoQMEGrammarAccess.AndBooleanTermElements getAndBooleanTermAccess() {
		return gaRoQME.getAndBooleanTermAccess();
	}
	
	public ParserRule getAndBooleanTermRule() {
		return getAndBooleanTermAccess().getRule();
	}
	
	//NotBooleanTerm expressions::Term:
	//	{expressions::NotBooleanTerm}
	//	'!' term=RelationalTerm;
	public RoQMEGrammarAccess.NotBooleanTermElements getNotBooleanTermAccess() {
		return gaRoQME.getNotBooleanTermAccess();
	}
	
	public ParserRule getNotBooleanTermRule() {
		return getNotBooleanTermAccess().getRule();
	}
	
	///*
	// * Relational Term
	// */ RelationalTerm expressions::Term:
	//	AdditionTerm (({expressions::EqualTerm.left=current} '='
	//	| {expressions::LessThanTerm.left=current} '<'
	//	| {expressions::GreaterThanTerm.left=current} '>'
	//	| {expressions::LessEqualTerm.left=current} '<='
	//	| {expressions::GreaterEqualTerm.left=current} '>='
	//	| {expressions::NotEqualTerm.left=current} '!=') right=AdditionTerm)?;
	public RoQMEGrammarAccess.RelationalTermElements getRelationalTermAccess() {
		return gaRoQME.getRelationalTermAccess();
	}
	
	public ParserRule getRelationalTermRule() {
		return getRelationalTermAccess().getRule();
	}
	
	///*
	// * Arithmetic Terms
	// */ AdditionTerm expressions::Term:
	//	MultiplicationTerm (({expressions::AddTerm.left=current} '+' | {expressions::SubTerm.left=current} '-')
	//	right=MultiplicationTerm)*;
	public RoQMEGrammarAccess.AdditionTermElements getAdditionTermAccess() {
		return gaRoQME.getAdditionTermAccess();
	}
	
	public ParserRule getAdditionTermRule() {
		return getAdditionTermAccess().getRule();
	}
	
	//MultiplicationTerm expressions::Term:
	//	PrimaryTerm (({expressions::MultTerm.left=current} '*' | {expressions::DivTerm.left=current} '/') right=PrimaryTerm)*;
	public RoQMEGrammarAccess.MultiplicationTermElements getMultiplicationTermAccess() {
		return gaRoQME.getMultiplicationTermAccess();
	}
	
	public ParserRule getMultiplicationTermRule() {
		return getMultiplicationTermAccess().getRule();
	}
	
	///*
	// * Primary Terms
	// */ PrimaryTerm expressions::Term:
	//	'(' Term ')' | ConstTerm | VarTerm | SelfTerm | FunctionTerm;
	public RoQMEGrammarAccess.PrimaryTermElements getPrimaryTermAccess() {
		return gaRoQME.getPrimaryTermAccess();
	}
	
	public ParserRule getPrimaryTermRule() {
		return getPrimaryTermAccess().getRule();
	}
	
	//VarTerm expressions::VarTerm:
	//	variable=[datatypes::TypedVariable|QualifiedName];
	public RoQMEGrammarAccess.VarTermElements getVarTermAccess() {
		return gaRoQME.getVarTermAccess();
	}
	
	public ParserRule getVarTermRule() {
		return getVarTermAccess().getRule();
	}
	
	//ConstTerm expressions::ConstTerm:
	//	value=TypedValue;
	public RoQMEGrammarAccess.ConstTermElements getConstTermAccess() {
		return gaRoQME.getConstTermAccess();
	}
	
	public ParserRule getConstTermRule() {
		return getConstTermAccess().getRule();
	}
	
	//SelfTerm expressions::SelfTerm:
	//	{expressions::SelfTerm}
	//	'belief';
	public RoQMEGrammarAccess.SelfTermElements getSelfTermAccess() {
		return gaRoQME.getSelfTermAccess();
	}
	
	public ParserRule getSelfTermRule() {
		return getSelfTermAccess().getRule();
	}
	
	///* 
	// * Functions
	// */ FunctionTerm expressions::FunctionTerm:
	//	ArithFunction | AggregationFunction | PatternFunction | CollectionFunction | ScheduleFunction;
	public RoQMEGrammarAccess.FunctionTermElements getFunctionTermAccess() {
		return gaRoQME.getFunctionTermAccess();
	}
	
	public ParserRule getFunctionTermRule() {
		return getFunctionTermAccess().getRule();
	}
	
	//ScheduleFunction expressions::ScheduleFunction:
	//	{expressions::ScheduleFunction}
	//	'schedule' '(' pattern=EString ')';
	public RoQMEGrammarAccess.ScheduleFunctionElements getScheduleFunctionAccess() {
		return gaRoQME.getScheduleFunctionAccess();
	}
	
	public ParserRule getScheduleFunctionRule() {
		return getScheduleFunctionAccess().getRule();
	}
	
	//ArithFunction expressions::ArithFunction:
	//	(terms+=(VarTerm | SelfTerm) "'")? name=ArithFtnEnum ('(' (terms+=Term (',' terms+=Term)*)? ')')?;
	public RoQMEGrammarAccess.ArithFunctionElements getArithFunctionAccess() {
		return gaRoQME.getArithFunctionAccess();
	}
	
	public ParserRule getArithFunctionRule() {
		return getArithFunctionAccess().getRule();
	}
	
	//enum ArithFtnEnum returns expressions::ArithFtnEnum:
	//	POW='pow' | SQRT='sqrt' | EXP='exp' | ABS='abs';
	public RoQMEGrammarAccess.ArithFtnEnumElements getArithFtnEnumAccess() {
		return gaRoQME.getArithFtnEnumAccess();
	}
	
	public EnumRule getArithFtnEnumRule() {
		return getArithFtnEnumAccess().getRule();
	}
	
	//AggregationFunction expressions::AggregationFunction:
	//	(terms+=(VarTerm | SelfTerm) "'")? name=AggregationFtnEnum ('(' (terms+=Term (',' terms+=Term)*)? ')')?;
	public RoQMEGrammarAccess.AggregationFunctionElements getAggregationFunctionAccess() {
		return gaRoQME.getAggregationFunctionAccess();
	}
	
	public ParserRule getAggregationFunctionRule() {
		return getAggregationFunctionAccess().getRule();
	}
	
	//enum AggregationFtnEnum returns expressions::AggregationFtnEnum:
	//	AVG='avg' | MIN='min' | MAX='max' | COUNT='count' | SUM='sum' | DECREASING='decreasing' | INCREASING='increasing' |
	//	STABLE='stable';
	public RoQMEGrammarAccess.AggregationFtnEnumElements getAggregationFtnEnumAccess() {
		return gaRoQME.getAggregationFtnEnumAccess();
	}
	
	public EnumRule getAggregationFtnEnumRule() {
		return getAggregationFtnEnumAccess().getRule();
	}
	
	//PatternFunction expressions::PatternFunction:
	//	(terms+=(VarTerm | SelfTerm) "'")? name=PatternFtnEnum ('(' (terms+=Term (',' terms+=Term)*)? ')')?;
	public RoQMEGrammarAccess.PatternFunctionElements getPatternFunctionAccess() {
		return gaRoQME.getPatternFunctionAccess();
	}
	
	public ParserRule getPatternFunctionRule() {
		return getPatternFunctionAccess().getRule();
	}
	
	//enum PatternFtnEnum returns expressions::PatternFtnEnum:
	//	EVENT_WHEN='eventWhen' | UPDATE='update' | PERIOD='period';
	public RoQMEGrammarAccess.PatternFtnEnumElements getPatternFtnEnumAccess() {
		return gaRoQME.getPatternFtnEnumAccess();
	}
	
	public EnumRule getPatternFtnEnumRule() {
		return getPatternFtnEnumAccess().getRule();
	}
	
	//CollectionFunction expressions::CollectionFunction:
	//	(terms+=(VarTerm | SelfTerm) "'")? name=CollectionFtnEnum ('(' (terms+=Term (',' terms+=Term)*)? ')')?;
	public RoQMEGrammarAccess.CollectionFunctionElements getCollectionFunctionAccess() {
		return gaRoQME.getCollectionFunctionAccess();
	}
	
	public ParserRule getCollectionFunctionRule() {
		return getCollectionFunctionAccess().getRule();
	}
	
	//enum CollectionFtnEnum returns expressions::CollectionFtnEnum:
	//	FIRST='first' | LAST='last' | AT='at' | SIZE='size' | IS_EMPTY='isEmpty' | INCLUDES='includes';
	public RoQMEGrammarAccess.CollectionFtnEnumElements getCollectionFtnEnumAccess() {
		return gaRoQME.getCollectionFtnEnumAccess();
	}
	
	public EnumRule getCollectionFtnEnumRule() {
		return getCollectionFtnEnumAccess().getRule();
	}
	
	///* *********************************
	// * Auxiliary grammar
	// * *********************************/ EString:
	//	STRING | ID;
	public RoQMEGrammarAccess.EStringElements getEStringAccess() {
		return gaRoQME.getEStringAccess();
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EDouble ecore::EDouble:
	//	'-'? INT ('.' INT)?;
	public RoQMEGrammarAccess.EDoubleElements getEDoubleAccess() {
		return gaRoQME.getEDoubleAccess();
	}
	
	public ParserRule getEDoubleRule() {
		return getEDoubleAccess().getRule();
	}
	
	////'-'? INT? '.' INT (('E'|'e') '-'? INT)?;
	//EBoolean ecore::EBoolean:
	//	'true' | 'false';
	public RoQMEGrammarAccess.EBooleanElements getEBooleanAccess() {
		return gaRoQME.getEBooleanAccess();
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public RoQMEGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaRoQME.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//LiteralQualifiedName:
	//	ID ('::' ID)+;
	public RoQMEGrammarAccess.LiteralQualifiedNameElements getLiteralQualifiedNameAccess() {
		return gaRoQME.getLiteralQualifiedNameAccess();
	}
	
	public ParserRule getLiteralQualifiedNameRule() {
		return getLiteralQualifiedNameAccess().getRule();
	}
	
	//ElementDescription:
	//	ROQME_DESCRIPTION;
	public RoQMEGrammarAccess.ElementDescriptionElements getElementDescriptionAccess() {
		return gaRoQME.getElementDescriptionAccess();
	}
	
	public ParserRule getElementDescriptionRule() {
		return getElementDescriptionAccess().getRule();
	}
	
	//terminal ROQME_DESCRIPTION:
	//	'/**'->'*/';
	public TerminalRule getROQME_DESCRIPTIONRule() {
		return gaRoQME.getROQME_DESCRIPTIONRule();
	}
	
	//@ Override terminal ML_COMMENT:
	//	('/*' !'*')->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaRoQME.getML_COMMENTRule();
	}
	
	//@ Override terminal STRING:
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return gaRoQME.getSTRINGRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
