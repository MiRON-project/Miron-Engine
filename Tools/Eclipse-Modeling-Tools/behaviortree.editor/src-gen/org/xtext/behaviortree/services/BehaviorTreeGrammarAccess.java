/*
 * generated by Xtext 2.12.0
 */
package org.xtext.behaviortree.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class BehaviorTreeGrammarAccess extends AbstractGrammarElementFinder {
	
	public class BTModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.behaviortree.BehaviorTree.BTModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cRootKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cMain_tree_to_executeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMain_tree_to_executeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cMain_tree_to_executeBehaviorTreeCrossReference_4_0 = (CrossReference)cMain_tree_to_executeAssignment_4.eContents().get(0);
		private final RuleCall cMain_tree_to_executeBehaviorTreeSTRINGTerminalRuleCall_4_0_1 = (RuleCall)cMain_tree_to_executeBehaviorTreeCrossReference_4_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cImportsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cImportsImportParserRuleCall_6_0 = (RuleCall)cImportsAssignment_6.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_7 = (UnorderedGroup)cGroup.eContents().get(7);
		private final Assignment cTreesAssignment_7_0 = (Assignment)cUnorderedGroup_7.eContents().get(0);
		private final RuleCall cTreesBehaviorTreeParserRuleCall_7_0_0 = (RuleCall)cTreesAssignment_7_0.eContents().get(0);
		private final Assignment cNodesmodelAssignment_7_1 = (Assignment)cUnorderedGroup_7.eContents().get(1);
		private final RuleCall cNodesmodelTreeNodesModelParserRuleCall_7_1_0 = (RuleCall)cNodesmodelAssignment_7_1.eContents().get(0);
		private final Keyword cLessThanSignSolidusKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cRootKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cGreaterThanSignKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//BTModel:
		//	'<' 'root' 'main_tree_to_execute' '=' main_tree_to_execute=[BehaviorTree|STRING] '>'
		//	imports+=Import* (trees+=BehaviorTree+ & nodesmodel=TreeNodesModel?)
		//	'</' 'root' '>';
		@Override public ParserRule getRule() { return rule; }
		
		//'<' 'root' 'main_tree_to_execute' '=' main_tree_to_execute=[BehaviorTree|STRING] '>' imports+=Import*
		//(trees+=BehaviorTree+ & nodesmodel=TreeNodesModel?) '</' 'root' '>'
		public Group getGroup() { return cGroup; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }
		
		//'root'
		public Keyword getRootKeyword_1() { return cRootKeyword_1; }
		
		//'main_tree_to_execute'
		public Keyword getMain_tree_to_executeKeyword_2() { return cMain_tree_to_executeKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//main_tree_to_execute=[BehaviorTree|STRING]
		public Assignment getMain_tree_to_executeAssignment_4() { return cMain_tree_to_executeAssignment_4; }
		
		//[BehaviorTree|STRING]
		public CrossReference getMain_tree_to_executeBehaviorTreeCrossReference_4_0() { return cMain_tree_to_executeBehaviorTreeCrossReference_4_0; }
		
		//STRING
		public RuleCall getMain_tree_to_executeBehaviorTreeSTRINGTerminalRuleCall_4_0_1() { return cMain_tree_to_executeBehaviorTreeSTRINGTerminalRuleCall_4_0_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_5() { return cGreaterThanSignKeyword_5; }
		
		//imports+=Import*
		public Assignment getImportsAssignment_6() { return cImportsAssignment_6; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_6_0() { return cImportsImportParserRuleCall_6_0; }
		
		//trees+=BehaviorTree+ & nodesmodel=TreeNodesModel?
		public UnorderedGroup getUnorderedGroup_7() { return cUnorderedGroup_7; }
		
		//trees+=BehaviorTree+
		public Assignment getTreesAssignment_7_0() { return cTreesAssignment_7_0; }
		
		//BehaviorTree
		public RuleCall getTreesBehaviorTreeParserRuleCall_7_0_0() { return cTreesBehaviorTreeParserRuleCall_7_0_0; }
		
		//nodesmodel=TreeNodesModel?
		public Assignment getNodesmodelAssignment_7_1() { return cNodesmodelAssignment_7_1; }
		
		//TreeNodesModel
		public RuleCall getNodesmodelTreeNodesModelParserRuleCall_7_1_0() { return cNodesmodelTreeNodesModelParserRuleCall_7_1_0; }
		
		//'</'
		public Keyword getLessThanSignSolidusKeyword_8() { return cLessThanSignSolidusKeyword_8; }
		
		//'root'
		public Keyword getRootKeyword_9() { return cRootKeyword_9; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_10() { return cGreaterThanSignKeyword_10; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.behaviortree.BehaviorTree.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cIncludeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cPathKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cImportURIAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cImportURISTRINGTerminalRuleCall_4_0 = (RuleCall)cImportURIAssignment_4.eContents().get(0);
		private final Keyword cSolidusGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Import:
		//	'<' 'include' 'path' '=' importURI=STRING '/>';
		@Override public ParserRule getRule() { return rule; }
		
		//'<' 'include' 'path' '=' importURI=STRING '/>'
		public Group getGroup() { return cGroup; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }
		
		//'include'
		public Keyword getIncludeKeyword_1() { return cIncludeKeyword_1; }
		
		//'path'
		public Keyword getPathKeyword_2() { return cPathKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//importURI=STRING
		public Assignment getImportURIAssignment_4() { return cImportURIAssignment_4; }
		
		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_4_0() { return cImportURISTRINGTerminalRuleCall_4_0; }
		
		//'/>'
		public Keyword getSolidusGreaterThanSignKeyword_5() { return cSolidusGreaterThanSignKeyword_5; }
	}
	public class BehaviorTreeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.behaviortree.BehaviorTree.BehaviorTree");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cBehaviorTreeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesAttributeParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNodesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNodesTreeNodeParserRuleCall_4_0 = (RuleCall)cNodesAssignment_4.eContents().get(0);
		private final Keyword cLessThanSignSolidusKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cBehaviorTreeKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cGreaterThanSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//BehaviorTree:
		//	'<' 'BehaviorTree' attributes+=Attribute* '>'
		//	nodes+=TreeNode+
		//	'</' 'BehaviorTree' '>';
		@Override public ParserRule getRule() { return rule; }
		
		//'<' 'BehaviorTree' attributes+=Attribute* '>' nodes+=TreeNode+ '</' 'BehaviorTree' '>'
		public Group getGroup() { return cGroup; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }
		
		//'BehaviorTree'
		public Keyword getBehaviorTreeKeyword_1() { return cBehaviorTreeKeyword_1; }
		
		//attributes+=Attribute*
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_2_0() { return cAttributesAttributeParserRuleCall_2_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
		
		//nodes+=TreeNode+
		public Assignment getNodesAssignment_4() { return cNodesAssignment_4; }
		
		//TreeNode
		public RuleCall getNodesTreeNodeParserRuleCall_4_0() { return cNodesTreeNodeParserRuleCall_4_0; }
		
		//'</'
		public Keyword getLessThanSignSolidusKeyword_5() { return cLessThanSignSolidusKeyword_5; }
		
		//'BehaviorTree'
		public Keyword getBehaviorTreeKeyword_6() { return cBehaviorTreeKeyword_6; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_7() { return cGreaterThanSignKeyword_7; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.behaviortree.BehaviorTree.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Attribute:
		//	name=ID '=' value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '=' value=STRING
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	public class TreeNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.behaviortree.BehaviorTree.TreeNode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cControlNodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDecoratorNodeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLeafNodeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSubtreeNodeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//TreeNode:
		//	ControlNode | DecoratorNode | LeafNode | SubtreeNode;
		@Override public ParserRule getRule() { return rule; }
		
		//ControlNode | DecoratorNode | LeafNode | SubtreeNode
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ControlNode
		public RuleCall getControlNodeParserRuleCall_0() { return cControlNodeParserRuleCall_0; }
		
		//DecoratorNode
		public RuleCall getDecoratorNodeParserRuleCall_1() { return cDecoratorNodeParserRuleCall_1; }
		
		//LeafNode
		public RuleCall getLeafNodeParserRuleCall_2() { return cLeafNodeParserRuleCall_2; }
		
		//SubtreeNode
		public RuleCall getSubtreeNodeParserRuleCall_3() { return cSubtreeNodeParserRuleCall_3; }
	}
	public class SubtreeNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.behaviortree.BehaviorTree.SubtreeNode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSubtreeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSubtreePlusParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SubtreeNode:
		//	Subtree | SubtreePlus;
		@Override public ParserRule getRule() { return rule; }
		
		//Subtree | SubtreePlus
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Subtree
		public RuleCall getSubtreeParserRuleCall_0() { return cSubtreeParserRuleCall_0; }
		
		//SubtreePlus
		public RuleCall getSubtreePlusParserRuleCall_1() { return cSubtreePlusParserRuleCall_1; }
	}
	public class SubtreeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.behaviortree.BehaviorTree.Subtree");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSubtreeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cSUBTREE_KEYWORDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBehaviortreeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cBehaviortreeBehaviorTreeCrossReference_4_0 = (CrossReference)cBehaviortreeAssignment_4.eContents().get(0);
		private final RuleCall cBehaviortreeBehaviorTreeSTRINGTerminalRuleCall_4_0_1 = (RuleCall)cBehaviortreeBehaviorTreeCrossReference_4_0.eContents().get(1);
		private final Assignment cAttributesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAttributesAttributeParserRuleCall_5_0 = (RuleCall)cAttributesAssignment_5.eContents().get(0);
		private final Keyword cSolidusGreaterThanSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Subtree:
		//	{Subtree}
		//	//'<' 'Subtree' 'ref' '=' behaviortree=[BehaviorTree|STRING] 
		//	'<' SUBTREE_KEYWORD '=' behaviortree=[BehaviorTree|STRING] attributes+=Attribute* '/>';
		@Override public ParserRule getRule() { return rule; }
		
		//{Subtree} //'<' 'Subtree' 'ref' '=' behaviortree=[BehaviorTree|STRING] 
		//'<' SUBTREE_KEYWORD '=' behaviortree=[BehaviorTree|STRING] attributes+=Attribute* '/>'
		public Group getGroup() { return cGroup; }
		
		//{Subtree}
		public Action getSubtreeAction_0() { return cSubtreeAction_0; }
		
		////'<' 'Subtree' 'ref' '=' behaviortree=[BehaviorTree|STRING] 
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//SUBTREE_KEYWORD
		public RuleCall getSUBTREE_KEYWORDTerminalRuleCall_2() { return cSUBTREE_KEYWORDTerminalRuleCall_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//behaviortree=[BehaviorTree|STRING]
		public Assignment getBehaviortreeAssignment_4() { return cBehaviortreeAssignment_4; }
		
		//[BehaviorTree|STRING]
		public CrossReference getBehaviortreeBehaviorTreeCrossReference_4_0() { return cBehaviortreeBehaviorTreeCrossReference_4_0; }
		
		//STRING
		public RuleCall getBehaviortreeBehaviorTreeSTRINGTerminalRuleCall_4_0_1() { return cBehaviortreeBehaviorTreeSTRINGTerminalRuleCall_4_0_1; }
		
		//attributes+=Attribute*
		public Assignment getAttributesAssignment_5() { return cAttributesAssignment_5; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_5_0() { return cAttributesAttributeParserRuleCall_5_0; }
		
		//'/>'
		public Keyword getSolidusGreaterThanSignKeyword_6() { return cSolidusGreaterThanSignKeyword_6; }
	}
	public class SubtreePlusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.behaviortree.BehaviorTree.SubtreePlus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSubtreePlusAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cSUBTREEWRAPPER_KEYWORDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBehaviortreeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cBehaviortreeBehaviorTreeCrossReference_4_0 = (CrossReference)cBehaviortreeAssignment_4.eContents().get(0);
		private final RuleCall cBehaviortreeBehaviorTreeSTRINGTerminalRuleCall_4_0_1 = (RuleCall)cBehaviortreeBehaviorTreeCrossReference_4_0.eContents().get(1);
		private final Assignment cAttributesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAttributesAttributeParserRuleCall_5_0 = (RuleCall)cAttributesAssignment_5.eContents().get(0);
		private final Keyword cSolidusGreaterThanSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//SubtreePlus:
		//	{SubtreePlus}
		//	'<' SUBTREEWRAPPER_KEYWORD '=' behaviortree=[BehaviorTree|STRING] attributes+=Attribute* '/>';
		@Override public ParserRule getRule() { return rule; }
		
		//{SubtreePlus} '<' SUBTREEWRAPPER_KEYWORD '=' behaviortree=[BehaviorTree|STRING] attributes+=Attribute* '/>'
		public Group getGroup() { return cGroup; }
		
		//{SubtreePlus}
		public Action getSubtreePlusAction_0() { return cSubtreePlusAction_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//SUBTREEWRAPPER_KEYWORD
		public RuleCall getSUBTREEWRAPPER_KEYWORDTerminalRuleCall_2() { return cSUBTREEWRAPPER_KEYWORDTerminalRuleCall_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//behaviortree=[BehaviorTree|STRING]
		public Assignment getBehaviortreeAssignment_4() { return cBehaviortreeAssignment_4; }
		
		//[BehaviorTree|STRING]
		public CrossReference getBehaviortreeBehaviorTreeCrossReference_4_0() { return cBehaviortreeBehaviorTreeCrossReference_4_0; }
		
		//STRING
		public RuleCall getBehaviortreeBehaviorTreeSTRINGTerminalRuleCall_4_0_1() { return cBehaviortreeBehaviorTreeSTRINGTerminalRuleCall_4_0_1; }
		
		//attributes+=Attribute*
		public Assignment getAttributesAssignment_5() { return cAttributesAssignment_5; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_5_0() { return cAttributesAttributeParserRuleCall_5_0; }
		
		//'/>'
		public Keyword getSolidusGreaterThanSignKeyword_6() { return cSolidusGreaterThanSignKeyword_6; }
	}
	public class ControlNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.behaviortree.BehaviorTree.ControlNode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSequenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSequenceStarParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cParallelParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFallbackParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFallbackStarParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSwitchParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//ControlNode:
		//	Sequence | SequenceStar | Parallel | Fallback | FallbackStar | Switch;
		@Override public ParserRule getRule() { return rule; }
		
		//Sequence | SequenceStar | Parallel | Fallback | FallbackStar | Switch
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Sequence
		public RuleCall getSequenceParserRuleCall_0() { return cSequenceParserRuleCall_0; }
		
		//SequenceStar
		public RuleCall getSequenceStarParserRuleCall_1() { return cSequenceStarParserRuleCall_1; }
		
		//Parallel
		public RuleCall getParallelParserRuleCall_2() { return cParallelParserRuleCall_2; }
		
		//Fallback
		public RuleCall getFallbackParserRuleCall_3() { return cFallbackParserRuleCall_3; }
		
		//FallbackStar
		public RuleCall getFallbackStarParserRuleCall_4() { return cFallbackStarParserRuleCall_4; }
		
		//Switch
		public RuleCall getSwitchParserRuleCall_5() { return cSwitchParserRuleCall_5; }
	}
	public class SequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.behaviortree.BehaviorTree.Sequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSequenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSequenceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesAttributeParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNodesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNodesTreeNodeParserRuleCall_5_0 = (RuleCall)cNodesAssignment_5.eContents().get(0);
		private final Keyword cLessThanSignSolidusKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cSequenceKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cGreaterThanSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Sequence:
		//	{Sequence}
		//	'<' 'Sequence' attributes+=Attribute* '>'
		//	nodes+=TreeNode+
		//	'</' 'Sequence' '>';
		@Override public ParserRule getRule() { return rule; }
		
		//{Sequence} '<' 'Sequence' attributes+=Attribute* '>' nodes+=TreeNode+ '</' 'Sequence' '>'
		public Group getGroup() { return cGroup; }
		
		//{Sequence}
		public Action getSequenceAction_0() { return cSequenceAction_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//'Sequence'
		public Keyword getSequenceKeyword_2() { return cSequenceKeyword_2; }
		
		//attributes+=Attribute*
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_0() { return cAttributesAttributeParserRuleCall_3_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
		
		//nodes+=TreeNode+
		public Assignment getNodesAssignment_5() { return cNodesAssignment_5; }
		
		//TreeNode
		public RuleCall getNodesTreeNodeParserRuleCall_5_0() { return cNodesTreeNodeParserRuleCall_5_0; }
		
		//'</'
		public Keyword getLessThanSignSolidusKeyword_6() { return cLessThanSignSolidusKeyword_6; }
		
		//'Sequence'
		public Keyword getSequenceKeyword_7() { return cSequenceKeyword_7; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_8() { return cGreaterThanSignKeyword_8; }
	}
	public class SequenceStarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.behaviortree.BehaviorTree.SequenceStar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSequenceStarAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSequenceStarKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesAttributeParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNodesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNodesTreeNodeParserRuleCall_5_0 = (RuleCall)cNodesAssignment_5.eContents().get(0);
		private final Keyword cLessThanSignSolidusKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cSequenceStarKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cGreaterThanSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//SequenceStar:
		//	{SequenceStar}
		//	'<' 'SequenceStar' attributes+=Attribute* '>'
		//	nodes+=TreeNode+
		//	'</' 'SequenceStar' '>';
		@Override public ParserRule getRule() { return rule; }
		
		//{SequenceStar} '<' 'SequenceStar' attributes+=Attribute* '>' nodes+=TreeNode+ '</' 'SequenceStar' '>'
		public Group getGroup() { return cGroup; }
		
		//{SequenceStar}
		public Action getSequenceStarAction_0() { return cSequenceStarAction_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//'SequenceStar'
		public Keyword getSequenceStarKeyword_2() { return cSequenceStarKeyword_2; }
		
		//attributes+=Attribute*
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_0() { return cAttributesAttributeParserRuleCall_3_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
		
		//nodes+=TreeNode+
		public Assignment getNodesAssignment_5() { return cNodesAssignment_5; }
		
		//TreeNode
		public RuleCall getNodesTreeNodeParserRuleCall_5_0() { return cNodesTreeNodeParserRuleCall_5_0; }
		
		//'</'
		public Keyword getLessThanSignSolidusKeyword_6() { return cLessThanSignSolidusKeyword_6; }
		
		//'SequenceStar'
		public Keyword getSequenceStarKeyword_7() { return cSequenceStarKeyword_7; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_8() { return cGreaterThanSignKeyword_8; }
	}
	public class FallbackElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.behaviortree.BehaviorTree.Fallback");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFallbackAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFallbackKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesAttributeParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNodesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNodesTreeNodeParserRuleCall_5_0 = (RuleCall)cNodesAssignment_5.eContents().get(0);
		private final Keyword cLessThanSignSolidusKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cFallbackKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cGreaterThanSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Fallback:
		//	{Fallback}
		//	'<' 'Fallback' attributes+=Attribute* '>'
		//	nodes+=TreeNode+
		//	'</' 'Fallback' '>';
		@Override public ParserRule getRule() { return rule; }
		
		//{Fallback} '<' 'Fallback' attributes+=Attribute* '>' nodes+=TreeNode+ '</' 'Fallback' '>'
		public Group getGroup() { return cGroup; }
		
		//{Fallback}
		public Action getFallbackAction_0() { return cFallbackAction_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//'Fallback'
		public Keyword getFallbackKeyword_2() { return cFallbackKeyword_2; }
		
		//attributes+=Attribute*
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_0() { return cAttributesAttributeParserRuleCall_3_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
		
		//nodes+=TreeNode+
		public Assignment getNodesAssignment_5() { return cNodesAssignment_5; }
		
		//TreeNode
		public RuleCall getNodesTreeNodeParserRuleCall_5_0() { return cNodesTreeNodeParserRuleCall_5_0; }
		
		//'</'
		public Keyword getLessThanSignSolidusKeyword_6() { return cLessThanSignSolidusKeyword_6; }
		
		//'Fallback'
		public Keyword getFallbackKeyword_7() { return cFallbackKeyword_7; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_8() { return cGreaterThanSignKeyword_8; }
	}
	public class FallbackStarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.behaviortree.BehaviorTree.FallbackStar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFallbackStarAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFallbackStarKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesAttributeParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNodesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNodesTreeNodeParserRuleCall_5_0 = (RuleCall)cNodesAssignment_5.eContents().get(0);
		private final Keyword cLessThanSignSolidusKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cFallbackStarKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cGreaterThanSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//FallbackStar:
		//	{FallbackStar}
		//	'<' 'FallbackStar' attributes+=Attribute* '>'
		//	nodes+=TreeNode+
		//	'</' 'FallbackStar' '>';
		@Override public ParserRule getRule() { return rule; }
		
		//{FallbackStar} '<' 'FallbackStar' attributes+=Attribute* '>' nodes+=TreeNode+ '</' 'FallbackStar' '>'
		public Group getGroup() { return cGroup; }
		
		//{FallbackStar}
		public Action getFallbackStarAction_0() { return cFallbackStarAction_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//'FallbackStar'
		public Keyword getFallbackStarKeyword_2() { return cFallbackStarKeyword_2; }
		
		//attributes+=Attribute*
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_0() { return cAttributesAttributeParserRuleCall_3_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
		
		//nodes+=TreeNode+
		public Assignment getNodesAssignment_5() { return cNodesAssignment_5; }
		
		//TreeNode
		public RuleCall getNodesTreeNodeParserRuleCall_5_0() { return cNodesTreeNodeParserRuleCall_5_0; }
		
		//'</'
		public Keyword getLessThanSignSolidusKeyword_6() { return cLessThanSignSolidusKeyword_6; }
		
		//'FallbackStar'
		public Keyword getFallbackStarKeyword_7() { return cFallbackStarKeyword_7; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_8() { return cGreaterThanSignKeyword_8; }
	}
	public class ParallelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.behaviortree.BehaviorTree.Parallel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParallelAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cParallelKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesAttributeParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNodesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNodesTreeNodeParserRuleCall_5_0 = (RuleCall)cNodesAssignment_5.eContents().get(0);
		private final Keyword cLessThanSignSolidusKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cParallelKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cGreaterThanSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Parallel:
		//	{Parallel}
		//	'<' 'Parallel' attributes+=Attribute* '>'
		//	nodes+=TreeNode+
		//	'</' 'Parallel' '>';
		@Override public ParserRule getRule() { return rule; }
		
		//{Parallel} '<' 'Parallel' attributes+=Attribute* '>' nodes+=TreeNode+ '</' 'Parallel' '>'
		public Group getGroup() { return cGroup; }
		
		//{Parallel}
		public Action getParallelAction_0() { return cParallelAction_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//'Parallel'
		public Keyword getParallelKeyword_2() { return cParallelKeyword_2; }
		
		//attributes+=Attribute*
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_0() { return cAttributesAttributeParserRuleCall_3_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
		
		//nodes+=TreeNode+
		public Assignment getNodesAssignment_5() { return cNodesAssignment_5; }
		
		//TreeNode
		public RuleCall getNodesTreeNodeParserRuleCall_5_0() { return cNodesTreeNodeParserRuleCall_5_0; }
		
		//'</'
		public Keyword getLessThanSignSolidusKeyword_6() { return cLessThanSignSolidusKeyword_6; }
		
		//'Parallel'
		public Keyword getParallelKeyword_7() { return cParallelKeyword_7; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_8() { return cGreaterThanSignKeyword_8; }
	}
	public class SwitchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.behaviortree.BehaviorTree.Switch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSwitchAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cSWITCH_KEYWORDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesAttributeParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNodesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNodesTreeNodeParserRuleCall_5_0 = (RuleCall)cNodesAssignment_5.eContents().get(0);
		private final Keyword cLessThanSignSolidusKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cSWITCH_KEYWORDTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Keyword cGreaterThanSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Switch:
		//	{Switch}
		//	'<' SWITCH_KEYWORD attributes+=Attribute* '>'
		//	nodes+=TreeNode*
		//	'</' SWITCH_KEYWORD '>';
		@Override public ParserRule getRule() { return rule; }
		
		//{Switch} '<' SWITCH_KEYWORD attributes+=Attribute* '>' nodes+=TreeNode* '</' SWITCH_KEYWORD '>'
		public Group getGroup() { return cGroup; }
		
		//{Switch}
		public Action getSwitchAction_0() { return cSwitchAction_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//SWITCH_KEYWORD
		public RuleCall getSWITCH_KEYWORDTerminalRuleCall_2() { return cSWITCH_KEYWORDTerminalRuleCall_2; }
		
		//attributes+=Attribute*
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_0() { return cAttributesAttributeParserRuleCall_3_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
		
		//nodes+=TreeNode*
		public Assignment getNodesAssignment_5() { return cNodesAssignment_5; }
		
		//TreeNode
		public RuleCall getNodesTreeNodeParserRuleCall_5_0() { return cNodesTreeNodeParserRuleCall_5_0; }
		
		//'</'
		public Keyword getLessThanSignSolidusKeyword_6() { return cLessThanSignSolidusKeyword_6; }
		
		//SWITCH_KEYWORD
		public RuleCall getSWITCH_KEYWORDTerminalRuleCall_7() { return cSWITCH_KEYWORDTerminalRuleCall_7; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_8() { return cGreaterThanSignKeyword_8; }
	}
	public class DecoratorNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.behaviortree.BehaviorTree.DecoratorNode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cForceSuccessParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cForceFailureParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRepeatParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRetryUntilSuccessParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cInverterParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTimeoutParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cBlackboardCheckDoubleParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cBlackboardCheckIntParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cBlackboardCheckStringParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//DecoratorNode:
		//	ForceSuccess | ForceFailure | Repeat | RetryUntilSuccess | Inverter | Timeout | BlackboardCheckDouble |
		//	BlackboardCheckInt | BlackboardCheckString;
		@Override public ParserRule getRule() { return rule; }
		
		//ForceSuccess | ForceFailure | Repeat | RetryUntilSuccess | Inverter | Timeout | BlackboardCheckDouble |
		//BlackboardCheckInt | BlackboardCheckString
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ForceSuccess
		public RuleCall getForceSuccessParserRuleCall_0() { return cForceSuccessParserRuleCall_0; }
		
		//ForceFailure
		public RuleCall getForceFailureParserRuleCall_1() { return cForceFailureParserRuleCall_1; }
		
		//Repeat
		public RuleCall getRepeatParserRuleCall_2() { return cRepeatParserRuleCall_2; }
		
		//RetryUntilSuccess
		public RuleCall getRetryUntilSuccessParserRuleCall_3() { return cRetryUntilSuccessParserRuleCall_3; }
		
		//Inverter
		public RuleCall getInverterParserRuleCall_4() { return cInverterParserRuleCall_4; }
		
		//Timeout
		public RuleCall getTimeoutParserRuleCall_5() { return cTimeoutParserRuleCall_5; }
		
		//BlackboardCheckDouble
		public RuleCall getBlackboardCheckDoubleParserRuleCall_6() { return cBlackboardCheckDoubleParserRuleCall_6; }
		
		//BlackboardCheckInt
		public RuleCall getBlackboardCheckIntParserRuleCall_7() { return cBlackboardCheckIntParserRuleCall_7; }
		
		//BlackboardCheckString
		public RuleCall getBlackboardCheckStringParserRuleCall_8() { return cBlackboardCheckStringParserRuleCall_8; }
	}
	public class ForceSuccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.behaviortree.BehaviorTree.ForceSuccess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cForceSuccessAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cForceSuccessKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesAttributeParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNodeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNodeTreeNodeParserRuleCall_5_0 = (RuleCall)cNodeAssignment_5.eContents().get(0);
		private final Keyword cLessThanSignSolidusKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cForceSuccessKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cGreaterThanSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//ForceSuccess:
		//	{ForceSuccess}
		//	'<' 'ForceSuccess' attributes+=Attribute* '>'
		//	node=TreeNode
		//	'</' 'ForceSuccess' '>';
		@Override public ParserRule getRule() { return rule; }
		
		//{ForceSuccess} '<' 'ForceSuccess' attributes+=Attribute* '>' node=TreeNode '</' 'ForceSuccess' '>'
		public Group getGroup() { return cGroup; }
		
		//{ForceSuccess}
		public Action getForceSuccessAction_0() { return cForceSuccessAction_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//'ForceSuccess'
		public Keyword getForceSuccessKeyword_2() { return cForceSuccessKeyword_2; }
		
		//attributes+=Attribute*
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_0() { return cAttributesAttributeParserRuleCall_3_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
		
		//node=TreeNode
		public Assignment getNodeAssignment_5() { return cNodeAssignment_5; }
		
		//TreeNode
		public RuleCall getNodeTreeNodeParserRuleCall_5_0() { return cNodeTreeNodeParserRuleCall_5_0; }
		
		//'</'
		public Keyword getLessThanSignSolidusKeyword_6() { return cLessThanSignSolidusKeyword_6; }
		
		//'ForceSuccess'
		public Keyword getForceSuccessKeyword_7() { return cForceSuccessKeyword_7; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_8() { return cGreaterThanSignKeyword_8; }
	}
	public class ForceFailureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.behaviortree.BehaviorTree.ForceFailure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cForceFailureAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cForceFailureKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesAttributeParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNodeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNodeTreeNodeParserRuleCall_5_0 = (RuleCall)cNodeAssignment_5.eContents().get(0);
		private final Keyword cLessThanSignSolidusKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cForceFailureKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cGreaterThanSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//ForceFailure:
		//	{ForceFailure}
		//	'<' 'ForceFailure' attributes+=Attribute* '>'
		//	node=TreeNode
		//	'</' 'ForceFailure' '>';
		@Override public ParserRule getRule() { return rule; }
		
		//{ForceFailure} '<' 'ForceFailure' attributes+=Attribute* '>' node=TreeNode '</' 'ForceFailure' '>'
		public Group getGroup() { return cGroup; }
		
		//{ForceFailure}
		public Action getForceFailureAction_0() { return cForceFailureAction_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//'ForceFailure'
		public Keyword getForceFailureKeyword_2() { return cForceFailureKeyword_2; }
		
		//attributes+=Attribute*
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_0() { return cAttributesAttributeParserRuleCall_3_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
		
		//node=TreeNode
		public Assignment getNodeAssignment_5() { return cNodeAssignment_5; }
		
		//TreeNode
		public RuleCall getNodeTreeNodeParserRuleCall_5_0() { return cNodeTreeNodeParserRuleCall_5_0; }
		
		//'</'
		public Keyword getLessThanSignSolidusKeyword_6() { return cLessThanSignSolidusKeyword_6; }
		
		//'ForceFailure'
		public Keyword getForceFailureKeyword_7() { return cForceFailureKeyword_7; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_8() { return cGreaterThanSignKeyword_8; }
	}
	public class RepeatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.behaviortree.BehaviorTree.Repeat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRepeatAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRepeatKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesAttributeParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNodeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNodeTreeNodeParserRuleCall_5_0 = (RuleCall)cNodeAssignment_5.eContents().get(0);
		private final Keyword cLessThanSignSolidusKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRepeatKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cGreaterThanSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Repeat:
		//	{Repeat}
		//	'<' 'Repeat' attributes+=Attribute* '>'
		//	node=TreeNode
		//	'</' 'Repeat' '>';
		@Override public ParserRule getRule() { return rule; }
		
		//{Repeat} '<' 'Repeat' attributes+=Attribute* '>' node=TreeNode '</' 'Repeat' '>'
		public Group getGroup() { return cGroup; }
		
		//{Repeat}
		public Action getRepeatAction_0() { return cRepeatAction_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//'Repeat'
		public Keyword getRepeatKeyword_2() { return cRepeatKeyword_2; }
		
		//attributes+=Attribute*
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_0() { return cAttributesAttributeParserRuleCall_3_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
		
		//node=TreeNode
		public Assignment getNodeAssignment_5() { return cNodeAssignment_5; }
		
		//TreeNode
		public RuleCall getNodeTreeNodeParserRuleCall_5_0() { return cNodeTreeNodeParserRuleCall_5_0; }
		
		//'</'
		public Keyword getLessThanSignSolidusKeyword_6() { return cLessThanSignSolidusKeyword_6; }
		
		//'Repeat'
		public Keyword getRepeatKeyword_7() { return cRepeatKeyword_7; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_8() { return cGreaterThanSignKeyword_8; }
	}
	public class InverterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.behaviortree.BehaviorTree.Inverter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInverterAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cInverterKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesAttributeParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNodeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNodeTreeNodeParserRuleCall_5_0 = (RuleCall)cNodeAssignment_5.eContents().get(0);
		private final Keyword cLessThanSignSolidusKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cInverterKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cGreaterThanSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Inverter:
		//	{Inverter}
		//	'<' 'Inverter' attributes+=Attribute* '>'
		//	node=TreeNode
		//	'</' 'Inverter' '>';
		@Override public ParserRule getRule() { return rule; }
		
		//{Inverter} '<' 'Inverter' attributes+=Attribute* '>' node=TreeNode '</' 'Inverter' '>'
		public Group getGroup() { return cGroup; }
		
		//{Inverter}
		public Action getInverterAction_0() { return cInverterAction_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//'Inverter'
		public Keyword getInverterKeyword_2() { return cInverterKeyword_2; }
		
		//attributes+=Attribute*
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_0() { return cAttributesAttributeParserRuleCall_3_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
		
		//node=TreeNode
		public Assignment getNodeAssignment_5() { return cNodeAssignment_5; }
		
		//TreeNode
		public RuleCall getNodeTreeNodeParserRuleCall_5_0() { return cNodeTreeNodeParserRuleCall_5_0; }
		
		//'</'
		public Keyword getLessThanSignSolidusKeyword_6() { return cLessThanSignSolidusKeyword_6; }
		
		//'Inverter'
		public Keyword getInverterKeyword_7() { return cInverterKeyword_7; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_8() { return cGreaterThanSignKeyword_8; }
	}
	public class TimeoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.behaviortree.BehaviorTree.Timeout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTimeoutAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTimeoutKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesAttributeParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNodeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNodeTreeNodeParserRuleCall_5_0 = (RuleCall)cNodeAssignment_5.eContents().get(0);
		private final Keyword cLessThanSignSolidusKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cTimeoutKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cGreaterThanSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Timeout:
		//	{Timeout}
		//	'<' 'Timeout' attributes+=Attribute* '>'
		//	node=TreeNode
		//	'</' 'Timeout' '>';
		@Override public ParserRule getRule() { return rule; }
		
		//{Timeout} '<' 'Timeout' attributes+=Attribute* '>' node=TreeNode '</' 'Timeout' '>'
		public Group getGroup() { return cGroup; }
		
		//{Timeout}
		public Action getTimeoutAction_0() { return cTimeoutAction_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//'Timeout'
		public Keyword getTimeoutKeyword_2() { return cTimeoutKeyword_2; }
		
		//attributes+=Attribute*
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_0() { return cAttributesAttributeParserRuleCall_3_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
		
		//node=TreeNode
		public Assignment getNodeAssignment_5() { return cNodeAssignment_5; }
		
		//TreeNode
		public RuleCall getNodeTreeNodeParserRuleCall_5_0() { return cNodeTreeNodeParserRuleCall_5_0; }
		
		//'</'
		public Keyword getLessThanSignSolidusKeyword_6() { return cLessThanSignSolidusKeyword_6; }
		
		//'Timeout'
		public Keyword getTimeoutKeyword_7() { return cTimeoutKeyword_7; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_8() { return cGreaterThanSignKeyword_8; }
	}
	public class RetryUntilSuccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.behaviortree.BehaviorTree.RetryUntilSuccess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRetryUntilSuccessAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRetryUntilSuccesfulKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesAttributeParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNodeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNodeTreeNodeParserRuleCall_5_0 = (RuleCall)cNodeAssignment_5.eContents().get(0);
		private final Keyword cLessThanSignSolidusKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRetryUntilSuccesfulKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cGreaterThanSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//RetryUntilSuccess:
		//	{RetryUntilSuccess}
		//	'<' 'RetryUntilSuccesful' attributes+=Attribute* '>'
		//	node=TreeNode
		//	'</' 'RetryUntilSuccesful' '>';
		@Override public ParserRule getRule() { return rule; }
		
		//{RetryUntilSuccess} '<' 'RetryUntilSuccesful' attributes+=Attribute* '>' node=TreeNode '</' 'RetryUntilSuccesful' '>'
		public Group getGroup() { return cGroup; }
		
		//{RetryUntilSuccess}
		public Action getRetryUntilSuccessAction_0() { return cRetryUntilSuccessAction_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//'RetryUntilSuccesful'
		public Keyword getRetryUntilSuccesfulKeyword_2() { return cRetryUntilSuccesfulKeyword_2; }
		
		//attributes+=Attribute*
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_0() { return cAttributesAttributeParserRuleCall_3_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
		
		//node=TreeNode
		public Assignment getNodeAssignment_5() { return cNodeAssignment_5; }
		
		//TreeNode
		public RuleCall getNodeTreeNodeParserRuleCall_5_0() { return cNodeTreeNodeParserRuleCall_5_0; }
		
		//'</'
		public Keyword getLessThanSignSolidusKeyword_6() { return cLessThanSignSolidusKeyword_6; }
		
		//'RetryUntilSuccesful'
		public Keyword getRetryUntilSuccesfulKeyword_7() { return cRetryUntilSuccesfulKeyword_7; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_8() { return cGreaterThanSignKeyword_8; }
	}
	public class BlackboardCheckDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.behaviortree.BehaviorTree.BlackboardCheckDouble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlackboardCheckDoubleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cBlackboardCheckDoubleKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesAttributeParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNodeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNodeTreeNodeParserRuleCall_5_0 = (RuleCall)cNodeAssignment_5.eContents().get(0);
		private final Keyword cLessThanSignSolidusKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cBlackboardCheckDoubleKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cGreaterThanSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//BlackboardCheckDouble:
		//	{BlackboardCheckDouble}
		//	'<' 'BlackboardCheckDouble' attributes+=Attribute* '>'
		//	node=TreeNode
		//	'</' 'BlackboardCheckDouble' '>';
		@Override public ParserRule getRule() { return rule; }
		
		//{BlackboardCheckDouble} '<' 'BlackboardCheckDouble' attributes+=Attribute* '>' node=TreeNode '</'
		//'BlackboardCheckDouble' '>'
		public Group getGroup() { return cGroup; }
		
		//{BlackboardCheckDouble}
		public Action getBlackboardCheckDoubleAction_0() { return cBlackboardCheckDoubleAction_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//'BlackboardCheckDouble'
		public Keyword getBlackboardCheckDoubleKeyword_2() { return cBlackboardCheckDoubleKeyword_2; }
		
		//attributes+=Attribute*
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_0() { return cAttributesAttributeParserRuleCall_3_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
		
		//node=TreeNode
		public Assignment getNodeAssignment_5() { return cNodeAssignment_5; }
		
		//TreeNode
		public RuleCall getNodeTreeNodeParserRuleCall_5_0() { return cNodeTreeNodeParserRuleCall_5_0; }
		
		//'</'
		public Keyword getLessThanSignSolidusKeyword_6() { return cLessThanSignSolidusKeyword_6; }
		
		//'BlackboardCheckDouble'
		public Keyword getBlackboardCheckDoubleKeyword_7() { return cBlackboardCheckDoubleKeyword_7; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_8() { return cGreaterThanSignKeyword_8; }
	}
	public class BlackboardCheckIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.behaviortree.BehaviorTree.BlackboardCheckInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlackboardCheckIntAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cBlackboardCheckIntKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesAttributeParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNodeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNodeTreeNodeParserRuleCall_5_0 = (RuleCall)cNodeAssignment_5.eContents().get(0);
		private final Keyword cLessThanSignSolidusKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cBlackboardCheckIntKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cGreaterThanSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//BlackboardCheckInt:
		//	{BlackboardCheckInt}
		//	'<' 'BlackboardCheckInt' attributes+=Attribute* '>'
		//	node=TreeNode
		//	'</' 'BlackboardCheckInt' '>';
		@Override public ParserRule getRule() { return rule; }
		
		//{BlackboardCheckInt} '<' 'BlackboardCheckInt' attributes+=Attribute* '>' node=TreeNode '</' 'BlackboardCheckInt' '>'
		public Group getGroup() { return cGroup; }
		
		//{BlackboardCheckInt}
		public Action getBlackboardCheckIntAction_0() { return cBlackboardCheckIntAction_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//'BlackboardCheckInt'
		public Keyword getBlackboardCheckIntKeyword_2() { return cBlackboardCheckIntKeyword_2; }
		
		//attributes+=Attribute*
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_0() { return cAttributesAttributeParserRuleCall_3_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
		
		//node=TreeNode
		public Assignment getNodeAssignment_5() { return cNodeAssignment_5; }
		
		//TreeNode
		public RuleCall getNodeTreeNodeParserRuleCall_5_0() { return cNodeTreeNodeParserRuleCall_5_0; }
		
		//'</'
		public Keyword getLessThanSignSolidusKeyword_6() { return cLessThanSignSolidusKeyword_6; }
		
		//'BlackboardCheckInt'
		public Keyword getBlackboardCheckIntKeyword_7() { return cBlackboardCheckIntKeyword_7; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_8() { return cGreaterThanSignKeyword_8; }
	}
	public class BlackboardCheckStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.behaviortree.BehaviorTree.BlackboardCheckString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlackboardCheckStringAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cBlackboardCheckStringKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesAttributeParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNodeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNodeTreeNodeParserRuleCall_5_0 = (RuleCall)cNodeAssignment_5.eContents().get(0);
		private final Keyword cLessThanSignSolidusKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cBlackboardCheckStringKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cGreaterThanSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//BlackboardCheckString:
		//	{BlackboardCheckString}
		//	'<' 'BlackboardCheckString' attributes+=Attribute* '>'
		//	node=TreeNode
		//	'</' 'BlackboardCheckString' '>';
		@Override public ParserRule getRule() { return rule; }
		
		//{BlackboardCheckString} '<' 'BlackboardCheckString' attributes+=Attribute* '>' node=TreeNode '</'
		//'BlackboardCheckString' '>'
		public Group getGroup() { return cGroup; }
		
		//{BlackboardCheckString}
		public Action getBlackboardCheckStringAction_0() { return cBlackboardCheckStringAction_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//'BlackboardCheckString'
		public Keyword getBlackboardCheckStringKeyword_2() { return cBlackboardCheckStringKeyword_2; }
		
		//attributes+=Attribute*
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_0() { return cAttributesAttributeParserRuleCall_3_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
		
		//node=TreeNode
		public Assignment getNodeAssignment_5() { return cNodeAssignment_5; }
		
		//TreeNode
		public RuleCall getNodeTreeNodeParserRuleCall_5_0() { return cNodeTreeNodeParserRuleCall_5_0; }
		
		//'</'
		public Keyword getLessThanSignSolidusKeyword_6() { return cLessThanSignSolidusKeyword_6; }
		
		//'BlackboardCheckString'
		public Keyword getBlackboardCheckStringKeyword_7() { return cBlackboardCheckStringKeyword_7; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_8() { return cGreaterThanSignKeyword_8; }
	}
	public class LeafNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.behaviortree.BehaviorTree.LeafNode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAbstractActionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConditionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//LeafNode:
		//	AbstractAction | Condition;
		@Override public ParserRule getRule() { return rule; }
		
		//AbstractAction | Condition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AbstractAction
		public RuleCall getAbstractActionParserRuleCall_0() { return cAbstractActionParserRuleCall_0; }
		
		//Condition
		public RuleCall getConditionParserRuleCall_1() { return cConditionParserRuleCall_1; }
	}
	public class AbstractActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.behaviortree.BehaviorTree.AbstractAction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAlwaysSuccessParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAlwaysFailureParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSetBlackboardParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cActionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//AbstractAction:
		//	AlwaysSuccess | AlwaysFailure | SetBlackboard | Action;
		@Override public ParserRule getRule() { return rule; }
		
		//AlwaysSuccess | AlwaysFailure | SetBlackboard | Action
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AlwaysSuccess
		public RuleCall getAlwaysSuccessParserRuleCall_0() { return cAlwaysSuccessParserRuleCall_0; }
		
		//AlwaysFailure
		public RuleCall getAlwaysFailureParserRuleCall_1() { return cAlwaysFailureParserRuleCall_1; }
		
		//SetBlackboard
		public RuleCall getSetBlackboardParserRuleCall_2() { return cSetBlackboardParserRuleCall_2; }
		
		//Action
		public RuleCall getActionParserRuleCall_3() { return cActionParserRuleCall_3; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.behaviortree.BehaviorTree.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConditionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cConditionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesAttributeParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		private final Keyword cSolidusGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Condition:
		//	{Condition}
		//	'<' 'Condition' attributes+=Attribute* '/>';
		@Override public ParserRule getRule() { return rule; }
		
		//{Condition} '<' 'Condition' attributes+=Attribute* '/>'
		public Group getGroup() { return cGroup; }
		
		//{Condition}
		public Action getConditionAction_0() { return cConditionAction_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//'Condition'
		public Keyword getConditionKeyword_2() { return cConditionKeyword_2; }
		
		//attributes+=Attribute*
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_0() { return cAttributesAttributeParserRuleCall_3_0; }
		
		//'/>'
		public Keyword getSolidusGreaterThanSignKeyword_4() { return cSolidusGreaterThanSignKeyword_4; }
	}
	public class AlwaysSuccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.behaviortree.BehaviorTree.AlwaysSuccess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAlwaysSuccessAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAlwaysSuccessKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesAttributeParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		private final Keyword cSolidusGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AlwaysSuccess:
		//	{AlwaysSuccess}
		//	'<' 'AlwaysSuccess' attributes+=Attribute* '/>';
		@Override public ParserRule getRule() { return rule; }
		
		//{AlwaysSuccess} '<' 'AlwaysSuccess' attributes+=Attribute* '/>'
		public Group getGroup() { return cGroup; }
		
		//{AlwaysSuccess}
		public Action getAlwaysSuccessAction_0() { return cAlwaysSuccessAction_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//'AlwaysSuccess'
		public Keyword getAlwaysSuccessKeyword_2() { return cAlwaysSuccessKeyword_2; }
		
		//attributes+=Attribute*
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_0() { return cAttributesAttributeParserRuleCall_3_0; }
		
		//'/>'
		public Keyword getSolidusGreaterThanSignKeyword_4() { return cSolidusGreaterThanSignKeyword_4; }
	}
	public class AlwaysFailureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.behaviortree.BehaviorTree.AlwaysFailure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAlwaysFailureAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAlwaysFailureKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesAttributeParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		private final Keyword cSolidusGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AlwaysFailure:
		//	{AlwaysFailure}
		//	'<' 'AlwaysFailure' attributes+=Attribute* '/>';
		@Override public ParserRule getRule() { return rule; }
		
		//{AlwaysFailure} '<' 'AlwaysFailure' attributes+=Attribute* '/>'
		public Group getGroup() { return cGroup; }
		
		//{AlwaysFailure}
		public Action getAlwaysFailureAction_0() { return cAlwaysFailureAction_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//'AlwaysFailure'
		public Keyword getAlwaysFailureKeyword_2() { return cAlwaysFailureKeyword_2; }
		
		//attributes+=Attribute*
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_0() { return cAttributesAttributeParserRuleCall_3_0; }
		
		//'/>'
		public Keyword getSolidusGreaterThanSignKeyword_4() { return cSolidusGreaterThanSignKeyword_4; }
	}
	public class SetBlackboardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.behaviortree.BehaviorTree.SetBlackboard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSetBlackboardAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSetBlackboardKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesAttributeParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		private final Keyword cSolidusGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SetBlackboard:
		//	{SetBlackboard}
		//	'<' 'SetBlackboard' attributes+=Attribute* '/>';
		@Override public ParserRule getRule() { return rule; }
		
		//{SetBlackboard} '<' 'SetBlackboard' attributes+=Attribute* '/>'
		public Group getGroup() { return cGroup; }
		
		//{SetBlackboard}
		public Action getSetBlackboardAction_0() { return cSetBlackboardAction_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//'SetBlackboard'
		public Keyword getSetBlackboardKeyword_2() { return cSetBlackboardKeyword_2; }
		
		//attributes+=Attribute*
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_0() { return cAttributesAttributeParserRuleCall_3_0; }
		
		//'/>'
		public Keyword getSolidusGreaterThanSignKeyword_4() { return cSolidusGreaterThanSignKeyword_4; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.behaviortree.BehaviorTree.Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cActionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesAttributeParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		private final Keyword cSolidusGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Action:
		//	{Action}
		//	'<' 'Action' attributes+=Attribute* '/>';
		@Override public ParserRule getRule() { return rule; }
		
		//{Action} '<' 'Action' attributes+=Attribute* '/>'
		public Group getGroup() { return cGroup; }
		
		//{Action}
		public Action getActionAction_0() { return cActionAction_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//'Action'
		public Keyword getActionKeyword_2() { return cActionKeyword_2; }
		
		//attributes+=Attribute*
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_0() { return cAttributesAttributeParserRuleCall_3_0; }
		
		//'/>'
		public Keyword getSolidusGreaterThanSignKeyword_4() { return cSolidusGreaterThanSignKeyword_4; }
	}
	public class TreeNodesModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.behaviortree.BehaviorTree.TreeNodesModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTreeNodesModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cContentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContentEStringParserRuleCall_1_0 = (RuleCall)cContentAssignment_1.eContents().get(0);
		
		//TreeNodesModel:
		//	{TreeNodesModel} content=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{TreeNodesModel} content=EString
		public Group getGroup() { return cGroup; }
		
		//{TreeNodesModel}
		public Action getTreeNodesModelAction_0() { return cTreeNodesModelAction_0; }
		
		//content=EString
		public Assignment getContentAssignment_1() { return cContentAssignment_1; }
		
		//EString
		public RuleCall getContentEStringParserRuleCall_1_0() { return cContentEStringParserRuleCall_1_0; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.behaviortree.BehaviorTree.EString");
		private final RuleCall cDEFINITION_STRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EString:
		//	DEFINITION_STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//DEFINITION_STRING
		public RuleCall getDEFINITION_STRINGTerminalRuleCall() { return cDEFINITION_STRINGTerminalRuleCall; }
	}
	
	
	private final BTModelElements pBTModel;
	private final ImportElements pImport;
	private final BehaviorTreeElements pBehaviorTree;
	private final AttributeElements pAttribute;
	private final TreeNodeElements pTreeNode;
	private final SubtreeNodeElements pSubtreeNode;
	private final SubtreeElements pSubtree;
	private final SubtreePlusElements pSubtreePlus;
	private final ControlNodeElements pControlNode;
	private final SequenceElements pSequence;
	private final SequenceStarElements pSequenceStar;
	private final FallbackElements pFallback;
	private final FallbackStarElements pFallbackStar;
	private final ParallelElements pParallel;
	private final SwitchElements pSwitch;
	private final DecoratorNodeElements pDecoratorNode;
	private final ForceSuccessElements pForceSuccess;
	private final ForceFailureElements pForceFailure;
	private final RepeatElements pRepeat;
	private final InverterElements pInverter;
	private final TimeoutElements pTimeout;
	private final RetryUntilSuccessElements pRetryUntilSuccess;
	private final BlackboardCheckDoubleElements pBlackboardCheckDouble;
	private final BlackboardCheckIntElements pBlackboardCheckInt;
	private final BlackboardCheckStringElements pBlackboardCheckString;
	private final LeafNodeElements pLeafNode;
	private final AbstractActionElements pAbstractAction;
	private final ConditionElements pCondition;
	private final AlwaysSuccessElements pAlwaysSuccess;
	private final AlwaysFailureElements pAlwaysFailure;
	private final SetBlackboardElements pSetBlackboard;
	private final ActionElements pAction;
	private final TreeNodesModelElements pTreeNodesModel;
	private final EStringElements pEString;
	private final TerminalRule tDEFINITION_STRING;
	private final TerminalRule tSWITCH_KEYWORD;
	private final TerminalRule tSUBTREE_KEYWORD;
	private final TerminalRule tSUBTREEWRAPPER_KEYWORD;
	private final TerminalRule tML_COMMENT;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BehaviorTreeGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pBTModel = new BTModelElements();
		this.pImport = new ImportElements();
		this.pBehaviorTree = new BehaviorTreeElements();
		this.pAttribute = new AttributeElements();
		this.pTreeNode = new TreeNodeElements();
		this.pSubtreeNode = new SubtreeNodeElements();
		this.pSubtree = new SubtreeElements();
		this.pSubtreePlus = new SubtreePlusElements();
		this.pControlNode = new ControlNodeElements();
		this.pSequence = new SequenceElements();
		this.pSequenceStar = new SequenceStarElements();
		this.pFallback = new FallbackElements();
		this.pFallbackStar = new FallbackStarElements();
		this.pParallel = new ParallelElements();
		this.pSwitch = new SwitchElements();
		this.pDecoratorNode = new DecoratorNodeElements();
		this.pForceSuccess = new ForceSuccessElements();
		this.pForceFailure = new ForceFailureElements();
		this.pRepeat = new RepeatElements();
		this.pInverter = new InverterElements();
		this.pTimeout = new TimeoutElements();
		this.pRetryUntilSuccess = new RetryUntilSuccessElements();
		this.pBlackboardCheckDouble = new BlackboardCheckDoubleElements();
		this.pBlackboardCheckInt = new BlackboardCheckIntElements();
		this.pBlackboardCheckString = new BlackboardCheckStringElements();
		this.pLeafNode = new LeafNodeElements();
		this.pAbstractAction = new AbstractActionElements();
		this.pCondition = new ConditionElements();
		this.pAlwaysSuccess = new AlwaysSuccessElements();
		this.pAlwaysFailure = new AlwaysFailureElements();
		this.pSetBlackboard = new SetBlackboardElements();
		this.pAction = new ActionElements();
		this.pTreeNodesModel = new TreeNodesModelElements();
		this.pEString = new EStringElements();
		this.tDEFINITION_STRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.behaviortree.BehaviorTree.DEFINITION_STRING");
		this.tSWITCH_KEYWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.behaviortree.BehaviorTree.SWITCH_KEYWORD");
		this.tSUBTREE_KEYWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.behaviortree.BehaviorTree.SUBTREE_KEYWORD");
		this.tSUBTREEWRAPPER_KEYWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.behaviortree.BehaviorTree.SUBTREEWRAPPER_KEYWORD");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.behaviortree.BehaviorTree.ML_COMMENT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.behaviortree.BehaviorTree".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//BTModel:
	//	'<' 'root' 'main_tree_to_execute' '=' main_tree_to_execute=[BehaviorTree|STRING] '>'
	//	imports+=Import* (trees+=BehaviorTree+ & nodesmodel=TreeNodesModel?)
	//	'</' 'root' '>';
	public BTModelElements getBTModelAccess() {
		return pBTModel;
	}
	
	public ParserRule getBTModelRule() {
		return getBTModelAccess().getRule();
	}
	
	//Import:
	//	'<' 'include' 'path' '=' importURI=STRING '/>';
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//BehaviorTree:
	//	'<' 'BehaviorTree' attributes+=Attribute* '>'
	//	nodes+=TreeNode+
	//	'</' 'BehaviorTree' '>';
	public BehaviorTreeElements getBehaviorTreeAccess() {
		return pBehaviorTree;
	}
	
	public ParserRule getBehaviorTreeRule() {
		return getBehaviorTreeAccess().getRule();
	}
	
	//Attribute:
	//	name=ID '=' value=STRING;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//TreeNode:
	//	ControlNode | DecoratorNode | LeafNode | SubtreeNode;
	public TreeNodeElements getTreeNodeAccess() {
		return pTreeNode;
	}
	
	public ParserRule getTreeNodeRule() {
		return getTreeNodeAccess().getRule();
	}
	
	//SubtreeNode:
	//	Subtree | SubtreePlus;
	public SubtreeNodeElements getSubtreeNodeAccess() {
		return pSubtreeNode;
	}
	
	public ParserRule getSubtreeNodeRule() {
		return getSubtreeNodeAccess().getRule();
	}
	
	//Subtree:
	//	{Subtree}
	//	//'<' 'Subtree' 'ref' '=' behaviortree=[BehaviorTree|STRING] 
	//	'<' SUBTREE_KEYWORD '=' behaviortree=[BehaviorTree|STRING] attributes+=Attribute* '/>';
	public SubtreeElements getSubtreeAccess() {
		return pSubtree;
	}
	
	public ParserRule getSubtreeRule() {
		return getSubtreeAccess().getRule();
	}
	
	//SubtreePlus:
	//	{SubtreePlus}
	//	'<' SUBTREEWRAPPER_KEYWORD '=' behaviortree=[BehaviorTree|STRING] attributes+=Attribute* '/>';
	public SubtreePlusElements getSubtreePlusAccess() {
		return pSubtreePlus;
	}
	
	public ParserRule getSubtreePlusRule() {
		return getSubtreePlusAccess().getRule();
	}
	
	//ControlNode:
	//	Sequence | SequenceStar | Parallel | Fallback | FallbackStar | Switch;
	public ControlNodeElements getControlNodeAccess() {
		return pControlNode;
	}
	
	public ParserRule getControlNodeRule() {
		return getControlNodeAccess().getRule();
	}
	
	//Sequence:
	//	{Sequence}
	//	'<' 'Sequence' attributes+=Attribute* '>'
	//	nodes+=TreeNode+
	//	'</' 'Sequence' '>';
	public SequenceElements getSequenceAccess() {
		return pSequence;
	}
	
	public ParserRule getSequenceRule() {
		return getSequenceAccess().getRule();
	}
	
	//SequenceStar:
	//	{SequenceStar}
	//	'<' 'SequenceStar' attributes+=Attribute* '>'
	//	nodes+=TreeNode+
	//	'</' 'SequenceStar' '>';
	public SequenceStarElements getSequenceStarAccess() {
		return pSequenceStar;
	}
	
	public ParserRule getSequenceStarRule() {
		return getSequenceStarAccess().getRule();
	}
	
	//Fallback:
	//	{Fallback}
	//	'<' 'Fallback' attributes+=Attribute* '>'
	//	nodes+=TreeNode+
	//	'</' 'Fallback' '>';
	public FallbackElements getFallbackAccess() {
		return pFallback;
	}
	
	public ParserRule getFallbackRule() {
		return getFallbackAccess().getRule();
	}
	
	//FallbackStar:
	//	{FallbackStar}
	//	'<' 'FallbackStar' attributes+=Attribute* '>'
	//	nodes+=TreeNode+
	//	'</' 'FallbackStar' '>';
	public FallbackStarElements getFallbackStarAccess() {
		return pFallbackStar;
	}
	
	public ParserRule getFallbackStarRule() {
		return getFallbackStarAccess().getRule();
	}
	
	//Parallel:
	//	{Parallel}
	//	'<' 'Parallel' attributes+=Attribute* '>'
	//	nodes+=TreeNode+
	//	'</' 'Parallel' '>';
	public ParallelElements getParallelAccess() {
		return pParallel;
	}
	
	public ParserRule getParallelRule() {
		return getParallelAccess().getRule();
	}
	
	//Switch:
	//	{Switch}
	//	'<' SWITCH_KEYWORD attributes+=Attribute* '>'
	//	nodes+=TreeNode*
	//	'</' SWITCH_KEYWORD '>';
	public SwitchElements getSwitchAccess() {
		return pSwitch;
	}
	
	public ParserRule getSwitchRule() {
		return getSwitchAccess().getRule();
	}
	
	//DecoratorNode:
	//	ForceSuccess | ForceFailure | Repeat | RetryUntilSuccess | Inverter | Timeout | BlackboardCheckDouble |
	//	BlackboardCheckInt | BlackboardCheckString;
	public DecoratorNodeElements getDecoratorNodeAccess() {
		return pDecoratorNode;
	}
	
	public ParserRule getDecoratorNodeRule() {
		return getDecoratorNodeAccess().getRule();
	}
	
	//ForceSuccess:
	//	{ForceSuccess}
	//	'<' 'ForceSuccess' attributes+=Attribute* '>'
	//	node=TreeNode
	//	'</' 'ForceSuccess' '>';
	public ForceSuccessElements getForceSuccessAccess() {
		return pForceSuccess;
	}
	
	public ParserRule getForceSuccessRule() {
		return getForceSuccessAccess().getRule();
	}
	
	//ForceFailure:
	//	{ForceFailure}
	//	'<' 'ForceFailure' attributes+=Attribute* '>'
	//	node=TreeNode
	//	'</' 'ForceFailure' '>';
	public ForceFailureElements getForceFailureAccess() {
		return pForceFailure;
	}
	
	public ParserRule getForceFailureRule() {
		return getForceFailureAccess().getRule();
	}
	
	//Repeat:
	//	{Repeat}
	//	'<' 'Repeat' attributes+=Attribute* '>'
	//	node=TreeNode
	//	'</' 'Repeat' '>';
	public RepeatElements getRepeatAccess() {
		return pRepeat;
	}
	
	public ParserRule getRepeatRule() {
		return getRepeatAccess().getRule();
	}
	
	//Inverter:
	//	{Inverter}
	//	'<' 'Inverter' attributes+=Attribute* '>'
	//	node=TreeNode
	//	'</' 'Inverter' '>';
	public InverterElements getInverterAccess() {
		return pInverter;
	}
	
	public ParserRule getInverterRule() {
		return getInverterAccess().getRule();
	}
	
	//Timeout:
	//	{Timeout}
	//	'<' 'Timeout' attributes+=Attribute* '>'
	//	node=TreeNode
	//	'</' 'Timeout' '>';
	public TimeoutElements getTimeoutAccess() {
		return pTimeout;
	}
	
	public ParserRule getTimeoutRule() {
		return getTimeoutAccess().getRule();
	}
	
	//RetryUntilSuccess:
	//	{RetryUntilSuccess}
	//	'<' 'RetryUntilSuccesful' attributes+=Attribute* '>'
	//	node=TreeNode
	//	'</' 'RetryUntilSuccesful' '>';
	public RetryUntilSuccessElements getRetryUntilSuccessAccess() {
		return pRetryUntilSuccess;
	}
	
	public ParserRule getRetryUntilSuccessRule() {
		return getRetryUntilSuccessAccess().getRule();
	}
	
	//BlackboardCheckDouble:
	//	{BlackboardCheckDouble}
	//	'<' 'BlackboardCheckDouble' attributes+=Attribute* '>'
	//	node=TreeNode
	//	'</' 'BlackboardCheckDouble' '>';
	public BlackboardCheckDoubleElements getBlackboardCheckDoubleAccess() {
		return pBlackboardCheckDouble;
	}
	
	public ParserRule getBlackboardCheckDoubleRule() {
		return getBlackboardCheckDoubleAccess().getRule();
	}
	
	//BlackboardCheckInt:
	//	{BlackboardCheckInt}
	//	'<' 'BlackboardCheckInt' attributes+=Attribute* '>'
	//	node=TreeNode
	//	'</' 'BlackboardCheckInt' '>';
	public BlackboardCheckIntElements getBlackboardCheckIntAccess() {
		return pBlackboardCheckInt;
	}
	
	public ParserRule getBlackboardCheckIntRule() {
		return getBlackboardCheckIntAccess().getRule();
	}
	
	//BlackboardCheckString:
	//	{BlackboardCheckString}
	//	'<' 'BlackboardCheckString' attributes+=Attribute* '>'
	//	node=TreeNode
	//	'</' 'BlackboardCheckString' '>';
	public BlackboardCheckStringElements getBlackboardCheckStringAccess() {
		return pBlackboardCheckString;
	}
	
	public ParserRule getBlackboardCheckStringRule() {
		return getBlackboardCheckStringAccess().getRule();
	}
	
	//LeafNode:
	//	AbstractAction | Condition;
	public LeafNodeElements getLeafNodeAccess() {
		return pLeafNode;
	}
	
	public ParserRule getLeafNodeRule() {
		return getLeafNodeAccess().getRule();
	}
	
	//AbstractAction:
	//	AlwaysSuccess | AlwaysFailure | SetBlackboard | Action;
	public AbstractActionElements getAbstractActionAccess() {
		return pAbstractAction;
	}
	
	public ParserRule getAbstractActionRule() {
		return getAbstractActionAccess().getRule();
	}
	
	//Condition:
	//	{Condition}
	//	'<' 'Condition' attributes+=Attribute* '/>';
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//AlwaysSuccess:
	//	{AlwaysSuccess}
	//	'<' 'AlwaysSuccess' attributes+=Attribute* '/>';
	public AlwaysSuccessElements getAlwaysSuccessAccess() {
		return pAlwaysSuccess;
	}
	
	public ParserRule getAlwaysSuccessRule() {
		return getAlwaysSuccessAccess().getRule();
	}
	
	//AlwaysFailure:
	//	{AlwaysFailure}
	//	'<' 'AlwaysFailure' attributes+=Attribute* '/>';
	public AlwaysFailureElements getAlwaysFailureAccess() {
		return pAlwaysFailure;
	}
	
	public ParserRule getAlwaysFailureRule() {
		return getAlwaysFailureAccess().getRule();
	}
	
	//SetBlackboard:
	//	{SetBlackboard}
	//	'<' 'SetBlackboard' attributes+=Attribute* '/>';
	public SetBlackboardElements getSetBlackboardAccess() {
		return pSetBlackboard;
	}
	
	public ParserRule getSetBlackboardRule() {
		return getSetBlackboardAccess().getRule();
	}
	
	//Action:
	//	{Action}
	//	'<' 'Action' attributes+=Attribute* '/>';
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//TreeNodesModel:
	//	{TreeNodesModel} content=EString;
	public TreeNodesModelElements getTreeNodesModelAccess() {
		return pTreeNodesModel;
	}
	
	public ParserRule getTreeNodesModelRule() {
		return getTreeNodesModelAccess().getRule();
	}
	
	//EString:
	//	DEFINITION_STRING;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//terminal DEFINITION_STRING:
	//	('<' WS? ('T' | 't') 'ree' ('N' | 'n') 'odes' ('M' | 'm') 'odel' WS? '>')->('</' WS? ('T' | 't') 'ree' ('N' | 'n')
	//	'odes' ('M' | 'm') 'odel' WS? '>');
	public TerminalRule getDEFINITION_STRINGRule() {
		return tDEFINITION_STRING;
	}
	
	//terminal SWITCH_KEYWORD:
	//	('S' | 's') 'witch' INT;
	public TerminalRule getSWITCH_KEYWORDRule() {
		return tSWITCH_KEYWORD;
	}
	
	//terminal SUBTREE_KEYWORD:
	//	('S' | 's') 'ub' ('t' | 'T') 'ree' WS ('I' | 'i') ('D' | 'd');
	public TerminalRule getSUBTREE_KEYWORDRule() {
		return tSUBTREE_KEYWORD;
	}
	
	//terminal SUBTREEWRAPPER_KEYWORD:
	//	('S' | 's') 'ub' ('T' | 't') 'ree' ('P' | 'p') 'lus' WS ('I' | 'i') ('D' | 'd');
	public TerminalRule getSUBTREEWRAPPER_KEYWORDRule() {
		return tSUBTREEWRAPPER_KEYWORD;
	}
	
	//@ Override terminal ML_COMMENT:
	//	'<?'->'?>' | '<!--'->'-->';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
