/*
 * generated by Xtext 2.12.0
 */
package org.xtext.behaviortree.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.behaviortree.services.BehaviorTreeGrammarAccess;

@SuppressWarnings("all")
public abstract class AbstractBehaviorTreeSyntacticSequencer extends AbstractSyntacticSequencer {

	protected BehaviorTreeGrammarAccess grammarAccess;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (BehaviorTreeGrammarAccess) access;
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getSUBTREEWRAPPER_KEYWORDRule())
			return getSUBTREEWRAPPER_KEYWORDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSUBTREE_KEYWORDRule())
			return getSUBTREE_KEYWORDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSWITCH_KEYWORDRule())
			return getSWITCH_KEYWORDToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal SUBTREEWRAPPER_KEYWORD: 
	 * 	('S'|'s') 'ub' ('T'|'t') 'ree' ('P'|'p') 'lus' WS ('I'|'i')('D'|'d') 
	 * ;
	 */
	protected String getSUBTREEWRAPPER_KEYWORDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "SubTreePlus ID";
	}
	
	/**
	 * terminal SUBTREE_KEYWORD: 
	 * 	('S'|'s') 'ub' ('t'|'T') 'ree' WS ('I'|'i')('D'|'d')
	 * ;
	 */
	protected String getSUBTREE_KEYWORDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "Subtree ID";
	}
	
	/**
	 * terminal SWITCH_KEYWORD: 
	 * 	('S'|'s') 'witch' INT
	 * ;
	 */
	protected String getSWITCH_KEYWORDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "Switch";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

}
