/*
 * generated by Xtext 2.12.0
 */
parser grammar InternalBehaviorTreeParser;

options {
	tokenVocab=InternalBehaviorTreeLexer;
	superClass=AbstractInternalAntlrParser;
}

@header {
package org.xtext.behaviortree.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.behaviortree.services.BehaviorTreeGrammarAccess;

}

@members {

 	private BehaviorTreeGrammarAccess grammarAccess;

    public InternalBehaviorTreeParser(TokenStream input, BehaviorTreeGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "BTModel";
   	}

   	@Override
   	protected BehaviorTreeGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleBTModel
entryRuleBTModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBTModelRule()); }
	iv_ruleBTModel=ruleBTModel
	{ $current=$iv_ruleBTModel.current; }
	EOF;

// Rule BTModel
ruleBTModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=LessThanSign
		{
			newLeafNode(otherlv_0, grammarAccess.getBTModelAccess().getLessThanSignKeyword_0());
		}
		otherlv_1=Root
		{
			newLeafNode(otherlv_1, grammarAccess.getBTModelAccess().getRootKeyword_1());
		}
		otherlv_2=Main_tree_to_execute
		{
			newLeafNode(otherlv_2, grammarAccess.getBTModelAccess().getMain_tree_to_executeKeyword_2());
		}
		otherlv_3=EqualsSign
		{
			newLeafNode(otherlv_3, grammarAccess.getBTModelAccess().getEqualsSignKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBTModelRule());
					}
				}
				otherlv_4=RULE_STRING
				{
					newLeafNode(otherlv_4, grammarAccess.getBTModelAccess().getMain_tree_to_executeBehaviorTreeCrossReference_4_0());
				}
			)
		)
		otherlv_5=GreaterThanSign
		{
			newLeafNode(otherlv_5, grammarAccess.getBTModelAccess().getGreaterThanSignKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBTModelAccess().getImportsImportParserRuleCall_6_0());
				}
				lv_imports_6_0=ruleImport
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBTModelRule());
					}
					add(
						$current,
						"imports",
						lv_imports_6_0,
						"org.xtext.behaviortree.BehaviorTree.Import");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{ 
				  getUnorderedGroupHelper().enter(grammarAccess.getBTModelAccess().getUnorderedGroup_7());
				}
				(
					(
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getBTModelAccess().getUnorderedGroup_7(), 0)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getBTModelAccess().getUnorderedGroup_7(), 0);
					}
								({true}?=>((
									{
										newCompositeNode(grammarAccess.getBTModelAccess().getTreesBehaviorTreeParserRuleCall_7_0_0());
									}
									lv_trees_8_0=ruleBehaviorTree
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getBTModelRule());
										}
										add(
											$current,
											"trees",
											lv_trees_8_0,
											"org.xtext.behaviortree.BehaviorTree.BehaviorTree");
										afterParserOrEnumRuleCall();
									}
								)
								))+
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getBTModelAccess().getUnorderedGroup_7());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getBTModelAccess().getUnorderedGroup_7(), 1)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getBTModelAccess().getUnorderedGroup_7(), 1);
					}
								({true}?=>((
									{
										newCompositeNode(grammarAccess.getBTModelAccess().getNodesmodelTreeNodesModelParserRuleCall_7_1_0());
									}
									lv_nodesmodel_9_0=ruleTreeNodesModel
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getBTModelRule());
										}
										set(
											$current,
											"nodesmodel",
											lv_nodesmodel_9_0,
											"org.xtext.behaviortree.BehaviorTree.TreeNodesModel");
										afterParserOrEnumRuleCall();
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getBTModelAccess().getUnorderedGroup_7());
					}
				)
			)
					)+
					{getUnorderedGroupHelper().canLeave(grammarAccess.getBTModelAccess().getUnorderedGroup_7())}?
				)
			)
				{ 
				  getUnorderedGroupHelper().leave(grammarAccess.getBTModelAccess().getUnorderedGroup_7());
				}
		)
		otherlv_10=LessThanSignSolidus
		{
			newLeafNode(otherlv_10, grammarAccess.getBTModelAccess().getLessThanSignSolidusKeyword_8());
		}
		otherlv_11=Root
		{
			newLeafNode(otherlv_11, grammarAccess.getBTModelAccess().getRootKeyword_9());
		}
		otherlv_12=GreaterThanSign
		{
			newLeafNode(otherlv_12, grammarAccess.getBTModelAccess().getGreaterThanSignKeyword_10());
		}
	)
;

// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	iv_ruleImport=ruleImport
	{ $current=$iv_ruleImport.current; }
	EOF;

// Rule Import
ruleImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=LessThanSign
		{
			newLeafNode(otherlv_0, grammarAccess.getImportAccess().getLessThanSignKeyword_0());
		}
		otherlv_1=Include
		{
			newLeafNode(otherlv_1, grammarAccess.getImportAccess().getIncludeKeyword_1());
		}
		otherlv_2=Path
		{
			newLeafNode(otherlv_2, grammarAccess.getImportAccess().getPathKeyword_2());
		}
		otherlv_3=EqualsSign
		{
			newLeafNode(otherlv_3, grammarAccess.getImportAccess().getEqualsSignKeyword_3());
		}
		(
			(
				lv_importURI_4_0=RULE_STRING
				{
					newLeafNode(lv_importURI_4_0, grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getImportRule());
					}
					setWithLastConsumed(
						$current,
						"importURI",
						lv_importURI_4_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_5=SolidusGreaterThanSign
		{
			newLeafNode(otherlv_5, grammarAccess.getImportAccess().getSolidusGreaterThanSignKeyword_5());
		}
	)
;

// Entry rule entryRuleBehaviorTree
entryRuleBehaviorTree returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBehaviorTreeRule()); }
	iv_ruleBehaviorTree=ruleBehaviorTree
	{ $current=$iv_ruleBehaviorTree.current; }
	EOF;

// Rule BehaviorTree
ruleBehaviorTree returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=LessThanSign
		{
			newLeafNode(otherlv_0, grammarAccess.getBehaviorTreeAccess().getLessThanSignKeyword_0());
		}
		otherlv_1=BehaviorTree
		{
			newLeafNode(otherlv_1, grammarAccess.getBehaviorTreeAccess().getBehaviorTreeKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBehaviorTreeAccess().getAttributesAttributeParserRuleCall_2_0());
				}
				lv_attributes_2_0=ruleAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBehaviorTreeRule());
					}
					add(
						$current,
						"attributes",
						lv_attributes_2_0,
						"org.xtext.behaviortree.BehaviorTree.Attribute");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3=GreaterThanSign
		{
			newLeafNode(otherlv_3, grammarAccess.getBehaviorTreeAccess().getGreaterThanSignKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBehaviorTreeAccess().getNodesTreeNodeParserRuleCall_4_0());
				}
				lv_nodes_4_0=ruleTreeNode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBehaviorTreeRule());
					}
					add(
						$current,
						"nodes",
						lv_nodes_4_0,
						"org.xtext.behaviortree.BehaviorTree.TreeNode");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_5=LessThanSignSolidus
		{
			newLeafNode(otherlv_5, grammarAccess.getBehaviorTreeAccess().getLessThanSignSolidusKeyword_5());
		}
		otherlv_6=BehaviorTree
		{
			newLeafNode(otherlv_6, grammarAccess.getBehaviorTreeAccess().getBehaviorTreeKeyword_6());
		}
		otherlv_7=GreaterThanSign
		{
			newLeafNode(otherlv_7, grammarAccess.getBehaviorTreeAccess().getGreaterThanSignKeyword_7());
		}
	)
;

// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	iv_ruleAttribute=ruleAttribute
	{ $current=$iv_ruleAttribute.current; }
	EOF;

// Rule Attribute
ruleAttribute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAttributeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=EqualsSign
		{
			newLeafNode(otherlv_1, grammarAccess.getAttributeAccess().getEqualsSignKeyword_1());
		}
		(
			(
				lv_value_2_0=RULE_STRING
				{
					newLeafNode(lv_value_2_0, grammarAccess.getAttributeAccess().getValueSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAttributeRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleTreeNode
entryRuleTreeNode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTreeNodeRule()); }
	iv_ruleTreeNode=ruleTreeNode
	{ $current=$iv_ruleTreeNode.current; }
	EOF;

// Rule TreeNode
ruleTreeNode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTreeNodeAccess().getControlNodeParserRuleCall_0());
		}
		this_ControlNode_0=ruleControlNode
		{
			$current = $this_ControlNode_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTreeNodeAccess().getDecoratorNodeParserRuleCall_1());
		}
		this_DecoratorNode_1=ruleDecoratorNode
		{
			$current = $this_DecoratorNode_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTreeNodeAccess().getLeafNodeParserRuleCall_2());
		}
		this_LeafNode_2=ruleLeafNode
		{
			$current = $this_LeafNode_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTreeNodeAccess().getSubtreeNodeParserRuleCall_3());
		}
		this_SubtreeNode_3=ruleSubtreeNode
		{
			$current = $this_SubtreeNode_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSubtreeNode
entryRuleSubtreeNode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSubtreeNodeRule()); }
	iv_ruleSubtreeNode=ruleSubtreeNode
	{ $current=$iv_ruleSubtreeNode.current; }
	EOF;

// Rule SubtreeNode
ruleSubtreeNode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSubtreeNodeAccess().getSubtreeParserRuleCall_0());
		}
		this_Subtree_0=ruleSubtree
		{
			$current = $this_Subtree_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSubtreeNodeAccess().getSubtreePlusParserRuleCall_1());
		}
		this_SubtreePlus_1=ruleSubtreePlus
		{
			$current = $this_SubtreePlus_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSubtree
entryRuleSubtree returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSubtreeRule()); }
	iv_ruleSubtree=ruleSubtree
	{ $current=$iv_ruleSubtree.current; }
	EOF;

// Rule Subtree
ruleSubtree returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSubtreeAccess().getSubtreeAction_0(),
					$current);
			}
		)
		otherlv_1=LessThanSign
		{
			newLeafNode(otherlv_1, grammarAccess.getSubtreeAccess().getLessThanSignKeyword_1());
		}
		this_SUBTREE_KEYWORD_2=RULE_SUBTREE_KEYWORD
		{
			newLeafNode(this_SUBTREE_KEYWORD_2, grammarAccess.getSubtreeAccess().getSUBTREE_KEYWORDTerminalRuleCall_2());
		}
		otherlv_3=EqualsSign
		{
			newLeafNode(otherlv_3, grammarAccess.getSubtreeAccess().getEqualsSignKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSubtreeRule());
					}
				}
				otherlv_4=RULE_STRING
				{
					newLeafNode(otherlv_4, grammarAccess.getSubtreeAccess().getBehaviortreeBehaviorTreeCrossReference_4_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSubtreeAccess().getAttributesAttributeParserRuleCall_5_0());
				}
				lv_attributes_5_0=ruleAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSubtreeRule());
					}
					add(
						$current,
						"attributes",
						lv_attributes_5_0,
						"org.xtext.behaviortree.BehaviorTree.Attribute");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6=SolidusGreaterThanSign
		{
			newLeafNode(otherlv_6, grammarAccess.getSubtreeAccess().getSolidusGreaterThanSignKeyword_6());
		}
	)
;

// Entry rule entryRuleSubtreePlus
entryRuleSubtreePlus returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSubtreePlusRule()); }
	iv_ruleSubtreePlus=ruleSubtreePlus
	{ $current=$iv_ruleSubtreePlus.current; }
	EOF;

// Rule SubtreePlus
ruleSubtreePlus returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSubtreePlusAccess().getSubtreePlusAction_0(),
					$current);
			}
		)
		otherlv_1=LessThanSign
		{
			newLeafNode(otherlv_1, grammarAccess.getSubtreePlusAccess().getLessThanSignKeyword_1());
		}
		this_SUBTREEWRAPPER_KEYWORD_2=RULE_SUBTREEWRAPPER_KEYWORD
		{
			newLeafNode(this_SUBTREEWRAPPER_KEYWORD_2, grammarAccess.getSubtreePlusAccess().getSUBTREEWRAPPER_KEYWORDTerminalRuleCall_2());
		}
		otherlv_3=EqualsSign
		{
			newLeafNode(otherlv_3, grammarAccess.getSubtreePlusAccess().getEqualsSignKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSubtreePlusRule());
					}
				}
				otherlv_4=RULE_STRING
				{
					newLeafNode(otherlv_4, grammarAccess.getSubtreePlusAccess().getBehaviortreeBehaviorTreeCrossReference_4_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSubtreePlusAccess().getAttributesAttributeParserRuleCall_5_0());
				}
				lv_attributes_5_0=ruleAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSubtreePlusRule());
					}
					add(
						$current,
						"attributes",
						lv_attributes_5_0,
						"org.xtext.behaviortree.BehaviorTree.Attribute");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6=SolidusGreaterThanSign
		{
			newLeafNode(otherlv_6, grammarAccess.getSubtreePlusAccess().getSolidusGreaterThanSignKeyword_6());
		}
	)
;

// Entry rule entryRuleControlNode
entryRuleControlNode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getControlNodeRule()); }
	iv_ruleControlNode=ruleControlNode
	{ $current=$iv_ruleControlNode.current; }
	EOF;

// Rule ControlNode
ruleControlNode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getControlNodeAccess().getSequenceParserRuleCall_0());
		}
		this_Sequence_0=ruleSequence
		{
			$current = $this_Sequence_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getControlNodeAccess().getSequenceStarParserRuleCall_1());
		}
		this_SequenceStar_1=ruleSequenceStar
		{
			$current = $this_SequenceStar_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getControlNodeAccess().getParallelParserRuleCall_2());
		}
		this_Parallel_2=ruleParallel
		{
			$current = $this_Parallel_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getControlNodeAccess().getFallbackParserRuleCall_3());
		}
		this_Fallback_3=ruleFallback
		{
			$current = $this_Fallback_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getControlNodeAccess().getFallbackStarParserRuleCall_4());
		}
		this_FallbackStar_4=ruleFallbackStar
		{
			$current = $this_FallbackStar_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getControlNodeAccess().getSwitchParserRuleCall_5());
		}
		this_Switch_5=ruleSwitch
		{
			$current = $this_Switch_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSequence
entryRuleSequence returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSequenceRule()); }
	iv_ruleSequence=ruleSequence
	{ $current=$iv_ruleSequence.current; }
	EOF;

// Rule Sequence
ruleSequence returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSequenceAccess().getSequenceAction_0(),
					$current);
			}
		)
		otherlv_1=LessThanSign
		{
			newLeafNode(otherlv_1, grammarAccess.getSequenceAccess().getLessThanSignKeyword_1());
		}
		otherlv_2=Sequence
		{
			newLeafNode(otherlv_2, grammarAccess.getSequenceAccess().getSequenceKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSequenceAccess().getAttributesAttributeParserRuleCall_3_0());
				}
				lv_attributes_3_0=ruleAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSequenceRule());
					}
					add(
						$current,
						"attributes",
						lv_attributes_3_0,
						"org.xtext.behaviortree.BehaviorTree.Attribute");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4=GreaterThanSign
		{
			newLeafNode(otherlv_4, grammarAccess.getSequenceAccess().getGreaterThanSignKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSequenceAccess().getNodesTreeNodeParserRuleCall_5_0());
				}
				lv_nodes_5_0=ruleTreeNode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSequenceRule());
					}
					add(
						$current,
						"nodes",
						lv_nodes_5_0,
						"org.xtext.behaviortree.BehaviorTree.TreeNode");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_6=LessThanSignSolidus
		{
			newLeafNode(otherlv_6, grammarAccess.getSequenceAccess().getLessThanSignSolidusKeyword_6());
		}
		otherlv_7=Sequence
		{
			newLeafNode(otherlv_7, grammarAccess.getSequenceAccess().getSequenceKeyword_7());
		}
		otherlv_8=GreaterThanSign
		{
			newLeafNode(otherlv_8, grammarAccess.getSequenceAccess().getGreaterThanSignKeyword_8());
		}
	)
;

// Entry rule entryRuleSequenceStar
entryRuleSequenceStar returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSequenceStarRule()); }
	iv_ruleSequenceStar=ruleSequenceStar
	{ $current=$iv_ruleSequenceStar.current; }
	EOF;

// Rule SequenceStar
ruleSequenceStar returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSequenceStarAccess().getSequenceStarAction_0(),
					$current);
			}
		)
		otherlv_1=LessThanSign
		{
			newLeafNode(otherlv_1, grammarAccess.getSequenceStarAccess().getLessThanSignKeyword_1());
		}
		otherlv_2=SequenceStar
		{
			newLeafNode(otherlv_2, grammarAccess.getSequenceStarAccess().getSequenceStarKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSequenceStarAccess().getAttributesAttributeParserRuleCall_3_0());
				}
				lv_attributes_3_0=ruleAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSequenceStarRule());
					}
					add(
						$current,
						"attributes",
						lv_attributes_3_0,
						"org.xtext.behaviortree.BehaviorTree.Attribute");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4=GreaterThanSign
		{
			newLeafNode(otherlv_4, grammarAccess.getSequenceStarAccess().getGreaterThanSignKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSequenceStarAccess().getNodesTreeNodeParserRuleCall_5_0());
				}
				lv_nodes_5_0=ruleTreeNode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSequenceStarRule());
					}
					add(
						$current,
						"nodes",
						lv_nodes_5_0,
						"org.xtext.behaviortree.BehaviorTree.TreeNode");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_6=LessThanSignSolidus
		{
			newLeafNode(otherlv_6, grammarAccess.getSequenceStarAccess().getLessThanSignSolidusKeyword_6());
		}
		otherlv_7=SequenceStar
		{
			newLeafNode(otherlv_7, grammarAccess.getSequenceStarAccess().getSequenceStarKeyword_7());
		}
		otherlv_8=GreaterThanSign
		{
			newLeafNode(otherlv_8, grammarAccess.getSequenceStarAccess().getGreaterThanSignKeyword_8());
		}
	)
;

// Entry rule entryRuleFallback
entryRuleFallback returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFallbackRule()); }
	iv_ruleFallback=ruleFallback
	{ $current=$iv_ruleFallback.current; }
	EOF;

// Rule Fallback
ruleFallback returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFallbackAccess().getFallbackAction_0(),
					$current);
			}
		)
		otherlv_1=LessThanSign
		{
			newLeafNode(otherlv_1, grammarAccess.getFallbackAccess().getLessThanSignKeyword_1());
		}
		otherlv_2=Fallback
		{
			newLeafNode(otherlv_2, grammarAccess.getFallbackAccess().getFallbackKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFallbackAccess().getAttributesAttributeParserRuleCall_3_0());
				}
				lv_attributes_3_0=ruleAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFallbackRule());
					}
					add(
						$current,
						"attributes",
						lv_attributes_3_0,
						"org.xtext.behaviortree.BehaviorTree.Attribute");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4=GreaterThanSign
		{
			newLeafNode(otherlv_4, grammarAccess.getFallbackAccess().getGreaterThanSignKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFallbackAccess().getNodesTreeNodeParserRuleCall_5_0());
				}
				lv_nodes_5_0=ruleTreeNode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFallbackRule());
					}
					add(
						$current,
						"nodes",
						lv_nodes_5_0,
						"org.xtext.behaviortree.BehaviorTree.TreeNode");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_6=LessThanSignSolidus
		{
			newLeafNode(otherlv_6, grammarAccess.getFallbackAccess().getLessThanSignSolidusKeyword_6());
		}
		otherlv_7=Fallback
		{
			newLeafNode(otherlv_7, grammarAccess.getFallbackAccess().getFallbackKeyword_7());
		}
		otherlv_8=GreaterThanSign
		{
			newLeafNode(otherlv_8, grammarAccess.getFallbackAccess().getGreaterThanSignKeyword_8());
		}
	)
;

// Entry rule entryRuleFallbackStar
entryRuleFallbackStar returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFallbackStarRule()); }
	iv_ruleFallbackStar=ruleFallbackStar
	{ $current=$iv_ruleFallbackStar.current; }
	EOF;

// Rule FallbackStar
ruleFallbackStar returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFallbackStarAccess().getFallbackStarAction_0(),
					$current);
			}
		)
		otherlv_1=LessThanSign
		{
			newLeafNode(otherlv_1, grammarAccess.getFallbackStarAccess().getLessThanSignKeyword_1());
		}
		otherlv_2=FallbackStar
		{
			newLeafNode(otherlv_2, grammarAccess.getFallbackStarAccess().getFallbackStarKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFallbackStarAccess().getAttributesAttributeParserRuleCall_3_0());
				}
				lv_attributes_3_0=ruleAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFallbackStarRule());
					}
					add(
						$current,
						"attributes",
						lv_attributes_3_0,
						"org.xtext.behaviortree.BehaviorTree.Attribute");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4=GreaterThanSign
		{
			newLeafNode(otherlv_4, grammarAccess.getFallbackStarAccess().getGreaterThanSignKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFallbackStarAccess().getNodesTreeNodeParserRuleCall_5_0());
				}
				lv_nodes_5_0=ruleTreeNode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFallbackStarRule());
					}
					add(
						$current,
						"nodes",
						lv_nodes_5_0,
						"org.xtext.behaviortree.BehaviorTree.TreeNode");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_6=LessThanSignSolidus
		{
			newLeafNode(otherlv_6, grammarAccess.getFallbackStarAccess().getLessThanSignSolidusKeyword_6());
		}
		otherlv_7=FallbackStar
		{
			newLeafNode(otherlv_7, grammarAccess.getFallbackStarAccess().getFallbackStarKeyword_7());
		}
		otherlv_8=GreaterThanSign
		{
			newLeafNode(otherlv_8, grammarAccess.getFallbackStarAccess().getGreaterThanSignKeyword_8());
		}
	)
;

// Entry rule entryRuleParallel
entryRuleParallel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParallelRule()); }
	iv_ruleParallel=ruleParallel
	{ $current=$iv_ruleParallel.current; }
	EOF;

// Rule Parallel
ruleParallel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getParallelAccess().getParallelAction_0(),
					$current);
			}
		)
		otherlv_1=LessThanSign
		{
			newLeafNode(otherlv_1, grammarAccess.getParallelAccess().getLessThanSignKeyword_1());
		}
		otherlv_2=Parallel
		{
			newLeafNode(otherlv_2, grammarAccess.getParallelAccess().getParallelKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getParallelAccess().getAttributesAttributeParserRuleCall_3_0());
				}
				lv_attributes_3_0=ruleAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParallelRule());
					}
					add(
						$current,
						"attributes",
						lv_attributes_3_0,
						"org.xtext.behaviortree.BehaviorTree.Attribute");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4=GreaterThanSign
		{
			newLeafNode(otherlv_4, grammarAccess.getParallelAccess().getGreaterThanSignKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getParallelAccess().getNodesTreeNodeParserRuleCall_5_0());
				}
				lv_nodes_5_0=ruleTreeNode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParallelRule());
					}
					add(
						$current,
						"nodes",
						lv_nodes_5_0,
						"org.xtext.behaviortree.BehaviorTree.TreeNode");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_6=LessThanSignSolidus
		{
			newLeafNode(otherlv_6, grammarAccess.getParallelAccess().getLessThanSignSolidusKeyword_6());
		}
		otherlv_7=Parallel
		{
			newLeafNode(otherlv_7, grammarAccess.getParallelAccess().getParallelKeyword_7());
		}
		otherlv_8=GreaterThanSign
		{
			newLeafNode(otherlv_8, grammarAccess.getParallelAccess().getGreaterThanSignKeyword_8());
		}
	)
;

// Entry rule entryRuleSwitch
entryRuleSwitch returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSwitchRule()); }
	iv_ruleSwitch=ruleSwitch
	{ $current=$iv_ruleSwitch.current; }
	EOF;

// Rule Switch
ruleSwitch returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSwitchAccess().getSwitchAction_0(),
					$current);
			}
		)
		otherlv_1=LessThanSign
		{
			newLeafNode(otherlv_1, grammarAccess.getSwitchAccess().getLessThanSignKeyword_1());
		}
		this_SWITCH_KEYWORD_2=RULE_SWITCH_KEYWORD
		{
			newLeafNode(this_SWITCH_KEYWORD_2, grammarAccess.getSwitchAccess().getSWITCH_KEYWORDTerminalRuleCall_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSwitchAccess().getAttributesAttributeParserRuleCall_3_0());
				}
				lv_attributes_3_0=ruleAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSwitchRule());
					}
					add(
						$current,
						"attributes",
						lv_attributes_3_0,
						"org.xtext.behaviortree.BehaviorTree.Attribute");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4=GreaterThanSign
		{
			newLeafNode(otherlv_4, grammarAccess.getSwitchAccess().getGreaterThanSignKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSwitchAccess().getNodesTreeNodeParserRuleCall_5_0());
				}
				lv_nodes_5_0=ruleTreeNode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSwitchRule());
					}
					add(
						$current,
						"nodes",
						lv_nodes_5_0,
						"org.xtext.behaviortree.BehaviorTree.TreeNode");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6=LessThanSignSolidus
		{
			newLeafNode(otherlv_6, grammarAccess.getSwitchAccess().getLessThanSignSolidusKeyword_6());
		}
		this_SWITCH_KEYWORD_7=RULE_SWITCH_KEYWORD
		{
			newLeafNode(this_SWITCH_KEYWORD_7, grammarAccess.getSwitchAccess().getSWITCH_KEYWORDTerminalRuleCall_7());
		}
		otherlv_8=GreaterThanSign
		{
			newLeafNode(otherlv_8, grammarAccess.getSwitchAccess().getGreaterThanSignKeyword_8());
		}
	)
;

// Entry rule entryRuleDecoratorNode
entryRuleDecoratorNode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDecoratorNodeRule()); }
	iv_ruleDecoratorNode=ruleDecoratorNode
	{ $current=$iv_ruleDecoratorNode.current; }
	EOF;

// Rule DecoratorNode
ruleDecoratorNode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDecoratorNodeAccess().getForceSuccessParserRuleCall_0());
		}
		this_ForceSuccess_0=ruleForceSuccess
		{
			$current = $this_ForceSuccess_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDecoratorNodeAccess().getForceFailureParserRuleCall_1());
		}
		this_ForceFailure_1=ruleForceFailure
		{
			$current = $this_ForceFailure_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDecoratorNodeAccess().getRepeatParserRuleCall_2());
		}
		this_Repeat_2=ruleRepeat
		{
			$current = $this_Repeat_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDecoratorNodeAccess().getRetryUntilSuccessParserRuleCall_3());
		}
		this_RetryUntilSuccess_3=ruleRetryUntilSuccess
		{
			$current = $this_RetryUntilSuccess_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDecoratorNodeAccess().getInverterParserRuleCall_4());
		}
		this_Inverter_4=ruleInverter
		{
			$current = $this_Inverter_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDecoratorNodeAccess().getTimeoutParserRuleCall_5());
		}
		this_Timeout_5=ruleTimeout
		{
			$current = $this_Timeout_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDecoratorNodeAccess().getBlackboardCheckDoubleParserRuleCall_6());
		}
		this_BlackboardCheckDouble_6=ruleBlackboardCheckDouble
		{
			$current = $this_BlackboardCheckDouble_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDecoratorNodeAccess().getBlackboardCheckIntParserRuleCall_7());
		}
		this_BlackboardCheckInt_7=ruleBlackboardCheckInt
		{
			$current = $this_BlackboardCheckInt_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDecoratorNodeAccess().getBlackboardCheckStringParserRuleCall_8());
		}
		this_BlackboardCheckString_8=ruleBlackboardCheckString
		{
			$current = $this_BlackboardCheckString_8.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleForceSuccess
entryRuleForceSuccess returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForceSuccessRule()); }
	iv_ruleForceSuccess=ruleForceSuccess
	{ $current=$iv_ruleForceSuccess.current; }
	EOF;

// Rule ForceSuccess
ruleForceSuccess returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getForceSuccessAccess().getForceSuccessAction_0(),
					$current);
			}
		)
		otherlv_1=LessThanSign
		{
			newLeafNode(otherlv_1, grammarAccess.getForceSuccessAccess().getLessThanSignKeyword_1());
		}
		otherlv_2=ForceSuccess
		{
			newLeafNode(otherlv_2, grammarAccess.getForceSuccessAccess().getForceSuccessKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForceSuccessAccess().getAttributesAttributeParserRuleCall_3_0());
				}
				lv_attributes_3_0=ruleAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForceSuccessRule());
					}
					add(
						$current,
						"attributes",
						lv_attributes_3_0,
						"org.xtext.behaviortree.BehaviorTree.Attribute");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4=GreaterThanSign
		{
			newLeafNode(otherlv_4, grammarAccess.getForceSuccessAccess().getGreaterThanSignKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForceSuccessAccess().getNodeTreeNodeParserRuleCall_5_0());
				}
				lv_node_5_0=ruleTreeNode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForceSuccessRule());
					}
					set(
						$current,
						"node",
						lv_node_5_0,
						"org.xtext.behaviortree.BehaviorTree.TreeNode");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=LessThanSignSolidus
		{
			newLeafNode(otherlv_6, grammarAccess.getForceSuccessAccess().getLessThanSignSolidusKeyword_6());
		}
		otherlv_7=ForceSuccess
		{
			newLeafNode(otherlv_7, grammarAccess.getForceSuccessAccess().getForceSuccessKeyword_7());
		}
		otherlv_8=GreaterThanSign
		{
			newLeafNode(otherlv_8, grammarAccess.getForceSuccessAccess().getGreaterThanSignKeyword_8());
		}
	)
;

// Entry rule entryRuleForceFailure
entryRuleForceFailure returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForceFailureRule()); }
	iv_ruleForceFailure=ruleForceFailure
	{ $current=$iv_ruleForceFailure.current; }
	EOF;

// Rule ForceFailure
ruleForceFailure returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getForceFailureAccess().getForceFailureAction_0(),
					$current);
			}
		)
		otherlv_1=LessThanSign
		{
			newLeafNode(otherlv_1, grammarAccess.getForceFailureAccess().getLessThanSignKeyword_1());
		}
		otherlv_2=ForceFailure
		{
			newLeafNode(otherlv_2, grammarAccess.getForceFailureAccess().getForceFailureKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForceFailureAccess().getAttributesAttributeParserRuleCall_3_0());
				}
				lv_attributes_3_0=ruleAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForceFailureRule());
					}
					add(
						$current,
						"attributes",
						lv_attributes_3_0,
						"org.xtext.behaviortree.BehaviorTree.Attribute");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4=GreaterThanSign
		{
			newLeafNode(otherlv_4, grammarAccess.getForceFailureAccess().getGreaterThanSignKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForceFailureAccess().getNodeTreeNodeParserRuleCall_5_0());
				}
				lv_node_5_0=ruleTreeNode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForceFailureRule());
					}
					set(
						$current,
						"node",
						lv_node_5_0,
						"org.xtext.behaviortree.BehaviorTree.TreeNode");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=LessThanSignSolidus
		{
			newLeafNode(otherlv_6, grammarAccess.getForceFailureAccess().getLessThanSignSolidusKeyword_6());
		}
		otherlv_7=ForceFailure
		{
			newLeafNode(otherlv_7, grammarAccess.getForceFailureAccess().getForceFailureKeyword_7());
		}
		otherlv_8=GreaterThanSign
		{
			newLeafNode(otherlv_8, grammarAccess.getForceFailureAccess().getGreaterThanSignKeyword_8());
		}
	)
;

// Entry rule entryRuleRepeat
entryRuleRepeat returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRepeatRule()); }
	iv_ruleRepeat=ruleRepeat
	{ $current=$iv_ruleRepeat.current; }
	EOF;

// Rule Repeat
ruleRepeat returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRepeatAccess().getRepeatAction_0(),
					$current);
			}
		)
		otherlv_1=LessThanSign
		{
			newLeafNode(otherlv_1, grammarAccess.getRepeatAccess().getLessThanSignKeyword_1());
		}
		otherlv_2=Repeat
		{
			newLeafNode(otherlv_2, grammarAccess.getRepeatAccess().getRepeatKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRepeatAccess().getAttributesAttributeParserRuleCall_3_0());
				}
				lv_attributes_3_0=ruleAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRepeatRule());
					}
					add(
						$current,
						"attributes",
						lv_attributes_3_0,
						"org.xtext.behaviortree.BehaviorTree.Attribute");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4=GreaterThanSign
		{
			newLeafNode(otherlv_4, grammarAccess.getRepeatAccess().getGreaterThanSignKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRepeatAccess().getNodeTreeNodeParserRuleCall_5_0());
				}
				lv_node_5_0=ruleTreeNode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRepeatRule());
					}
					set(
						$current,
						"node",
						lv_node_5_0,
						"org.xtext.behaviortree.BehaviorTree.TreeNode");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=LessThanSignSolidus
		{
			newLeafNode(otherlv_6, grammarAccess.getRepeatAccess().getLessThanSignSolidusKeyword_6());
		}
		otherlv_7=Repeat
		{
			newLeafNode(otherlv_7, grammarAccess.getRepeatAccess().getRepeatKeyword_7());
		}
		otherlv_8=GreaterThanSign
		{
			newLeafNode(otherlv_8, grammarAccess.getRepeatAccess().getGreaterThanSignKeyword_8());
		}
	)
;

// Entry rule entryRuleInverter
entryRuleInverter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInverterRule()); }
	iv_ruleInverter=ruleInverter
	{ $current=$iv_ruleInverter.current; }
	EOF;

// Rule Inverter
ruleInverter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getInverterAccess().getInverterAction_0(),
					$current);
			}
		)
		otherlv_1=LessThanSign
		{
			newLeafNode(otherlv_1, grammarAccess.getInverterAccess().getLessThanSignKeyword_1());
		}
		otherlv_2=Inverter
		{
			newLeafNode(otherlv_2, grammarAccess.getInverterAccess().getInverterKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInverterAccess().getAttributesAttributeParserRuleCall_3_0());
				}
				lv_attributes_3_0=ruleAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInverterRule());
					}
					add(
						$current,
						"attributes",
						lv_attributes_3_0,
						"org.xtext.behaviortree.BehaviorTree.Attribute");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4=GreaterThanSign
		{
			newLeafNode(otherlv_4, grammarAccess.getInverterAccess().getGreaterThanSignKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInverterAccess().getNodeTreeNodeParserRuleCall_5_0());
				}
				lv_node_5_0=ruleTreeNode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInverterRule());
					}
					set(
						$current,
						"node",
						lv_node_5_0,
						"org.xtext.behaviortree.BehaviorTree.TreeNode");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=LessThanSignSolidus
		{
			newLeafNode(otherlv_6, grammarAccess.getInverterAccess().getLessThanSignSolidusKeyword_6());
		}
		otherlv_7=Inverter
		{
			newLeafNode(otherlv_7, grammarAccess.getInverterAccess().getInverterKeyword_7());
		}
		otherlv_8=GreaterThanSign
		{
			newLeafNode(otherlv_8, grammarAccess.getInverterAccess().getGreaterThanSignKeyword_8());
		}
	)
;

// Entry rule entryRuleTimeout
entryRuleTimeout returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTimeoutRule()); }
	iv_ruleTimeout=ruleTimeout
	{ $current=$iv_ruleTimeout.current; }
	EOF;

// Rule Timeout
ruleTimeout returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTimeoutAccess().getTimeoutAction_0(),
					$current);
			}
		)
		otherlv_1=LessThanSign
		{
			newLeafNode(otherlv_1, grammarAccess.getTimeoutAccess().getLessThanSignKeyword_1());
		}
		otherlv_2=Timeout
		{
			newLeafNode(otherlv_2, grammarAccess.getTimeoutAccess().getTimeoutKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTimeoutAccess().getAttributesAttributeParserRuleCall_3_0());
				}
				lv_attributes_3_0=ruleAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTimeoutRule());
					}
					add(
						$current,
						"attributes",
						lv_attributes_3_0,
						"org.xtext.behaviortree.BehaviorTree.Attribute");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4=GreaterThanSign
		{
			newLeafNode(otherlv_4, grammarAccess.getTimeoutAccess().getGreaterThanSignKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTimeoutAccess().getNodeTreeNodeParserRuleCall_5_0());
				}
				lv_node_5_0=ruleTreeNode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTimeoutRule());
					}
					set(
						$current,
						"node",
						lv_node_5_0,
						"org.xtext.behaviortree.BehaviorTree.TreeNode");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=LessThanSignSolidus
		{
			newLeafNode(otherlv_6, grammarAccess.getTimeoutAccess().getLessThanSignSolidusKeyword_6());
		}
		otherlv_7=Timeout
		{
			newLeafNode(otherlv_7, grammarAccess.getTimeoutAccess().getTimeoutKeyword_7());
		}
		otherlv_8=GreaterThanSign
		{
			newLeafNode(otherlv_8, grammarAccess.getTimeoutAccess().getGreaterThanSignKeyword_8());
		}
	)
;

// Entry rule entryRuleRetryUntilSuccess
entryRuleRetryUntilSuccess returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRetryUntilSuccessRule()); }
	iv_ruleRetryUntilSuccess=ruleRetryUntilSuccess
	{ $current=$iv_ruleRetryUntilSuccess.current; }
	EOF;

// Rule RetryUntilSuccess
ruleRetryUntilSuccess returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRetryUntilSuccessAccess().getRetryUntilSuccessAction_0(),
					$current);
			}
		)
		otherlv_1=LessThanSign
		{
			newLeafNode(otherlv_1, grammarAccess.getRetryUntilSuccessAccess().getLessThanSignKeyword_1());
		}
		otherlv_2=RetryUntilSuccesful
		{
			newLeafNode(otherlv_2, grammarAccess.getRetryUntilSuccessAccess().getRetryUntilSuccesfulKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRetryUntilSuccessAccess().getAttributesAttributeParserRuleCall_3_0());
				}
				lv_attributes_3_0=ruleAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRetryUntilSuccessRule());
					}
					add(
						$current,
						"attributes",
						lv_attributes_3_0,
						"org.xtext.behaviortree.BehaviorTree.Attribute");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4=GreaterThanSign
		{
			newLeafNode(otherlv_4, grammarAccess.getRetryUntilSuccessAccess().getGreaterThanSignKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRetryUntilSuccessAccess().getNodeTreeNodeParserRuleCall_5_0());
				}
				lv_node_5_0=ruleTreeNode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRetryUntilSuccessRule());
					}
					set(
						$current,
						"node",
						lv_node_5_0,
						"org.xtext.behaviortree.BehaviorTree.TreeNode");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=LessThanSignSolidus
		{
			newLeafNode(otherlv_6, grammarAccess.getRetryUntilSuccessAccess().getLessThanSignSolidusKeyword_6());
		}
		otherlv_7=RetryUntilSuccesful
		{
			newLeafNode(otherlv_7, grammarAccess.getRetryUntilSuccessAccess().getRetryUntilSuccesfulKeyword_7());
		}
		otherlv_8=GreaterThanSign
		{
			newLeafNode(otherlv_8, grammarAccess.getRetryUntilSuccessAccess().getGreaterThanSignKeyword_8());
		}
	)
;

// Entry rule entryRuleBlackboardCheckDouble
entryRuleBlackboardCheckDouble returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlackboardCheckDoubleRule()); }
	iv_ruleBlackboardCheckDouble=ruleBlackboardCheckDouble
	{ $current=$iv_ruleBlackboardCheckDouble.current; }
	EOF;

// Rule BlackboardCheckDouble
ruleBlackboardCheckDouble returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBlackboardCheckDoubleAccess().getBlackboardCheckDoubleAction_0(),
					$current);
			}
		)
		otherlv_1=LessThanSign
		{
			newLeafNode(otherlv_1, grammarAccess.getBlackboardCheckDoubleAccess().getLessThanSignKeyword_1());
		}
		otherlv_2=BlackboardCheckDouble
		{
			newLeafNode(otherlv_2, grammarAccess.getBlackboardCheckDoubleAccess().getBlackboardCheckDoubleKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBlackboardCheckDoubleAccess().getAttributesAttributeParserRuleCall_3_0());
				}
				lv_attributes_3_0=ruleAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlackboardCheckDoubleRule());
					}
					add(
						$current,
						"attributes",
						lv_attributes_3_0,
						"org.xtext.behaviortree.BehaviorTree.Attribute");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4=GreaterThanSign
		{
			newLeafNode(otherlv_4, grammarAccess.getBlackboardCheckDoubleAccess().getGreaterThanSignKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBlackboardCheckDoubleAccess().getNodeTreeNodeParserRuleCall_5_0());
				}
				lv_node_5_0=ruleTreeNode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlackboardCheckDoubleRule());
					}
					set(
						$current,
						"node",
						lv_node_5_0,
						"org.xtext.behaviortree.BehaviorTree.TreeNode");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=LessThanSignSolidus
		{
			newLeafNode(otherlv_6, grammarAccess.getBlackboardCheckDoubleAccess().getLessThanSignSolidusKeyword_6());
		}
		otherlv_7=BlackboardCheckDouble
		{
			newLeafNode(otherlv_7, grammarAccess.getBlackboardCheckDoubleAccess().getBlackboardCheckDoubleKeyword_7());
		}
		otherlv_8=GreaterThanSign
		{
			newLeafNode(otherlv_8, grammarAccess.getBlackboardCheckDoubleAccess().getGreaterThanSignKeyword_8());
		}
	)
;

// Entry rule entryRuleBlackboardCheckInt
entryRuleBlackboardCheckInt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlackboardCheckIntRule()); }
	iv_ruleBlackboardCheckInt=ruleBlackboardCheckInt
	{ $current=$iv_ruleBlackboardCheckInt.current; }
	EOF;

// Rule BlackboardCheckInt
ruleBlackboardCheckInt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBlackboardCheckIntAccess().getBlackboardCheckIntAction_0(),
					$current);
			}
		)
		otherlv_1=LessThanSign
		{
			newLeafNode(otherlv_1, grammarAccess.getBlackboardCheckIntAccess().getLessThanSignKeyword_1());
		}
		otherlv_2=BlackboardCheckInt
		{
			newLeafNode(otherlv_2, grammarAccess.getBlackboardCheckIntAccess().getBlackboardCheckIntKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBlackboardCheckIntAccess().getAttributesAttributeParserRuleCall_3_0());
				}
				lv_attributes_3_0=ruleAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlackboardCheckIntRule());
					}
					add(
						$current,
						"attributes",
						lv_attributes_3_0,
						"org.xtext.behaviortree.BehaviorTree.Attribute");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4=GreaterThanSign
		{
			newLeafNode(otherlv_4, grammarAccess.getBlackboardCheckIntAccess().getGreaterThanSignKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBlackboardCheckIntAccess().getNodeTreeNodeParserRuleCall_5_0());
				}
				lv_node_5_0=ruleTreeNode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlackboardCheckIntRule());
					}
					set(
						$current,
						"node",
						lv_node_5_0,
						"org.xtext.behaviortree.BehaviorTree.TreeNode");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=LessThanSignSolidus
		{
			newLeafNode(otherlv_6, grammarAccess.getBlackboardCheckIntAccess().getLessThanSignSolidusKeyword_6());
		}
		otherlv_7=BlackboardCheckInt
		{
			newLeafNode(otherlv_7, grammarAccess.getBlackboardCheckIntAccess().getBlackboardCheckIntKeyword_7());
		}
		otherlv_8=GreaterThanSign
		{
			newLeafNode(otherlv_8, grammarAccess.getBlackboardCheckIntAccess().getGreaterThanSignKeyword_8());
		}
	)
;

// Entry rule entryRuleBlackboardCheckString
entryRuleBlackboardCheckString returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlackboardCheckStringRule()); }
	iv_ruleBlackboardCheckString=ruleBlackboardCheckString
	{ $current=$iv_ruleBlackboardCheckString.current; }
	EOF;

// Rule BlackboardCheckString
ruleBlackboardCheckString returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBlackboardCheckStringAccess().getBlackboardCheckStringAction_0(),
					$current);
			}
		)
		otherlv_1=LessThanSign
		{
			newLeafNode(otherlv_1, grammarAccess.getBlackboardCheckStringAccess().getLessThanSignKeyword_1());
		}
		otherlv_2=BlackboardCheckString
		{
			newLeafNode(otherlv_2, grammarAccess.getBlackboardCheckStringAccess().getBlackboardCheckStringKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBlackboardCheckStringAccess().getAttributesAttributeParserRuleCall_3_0());
				}
				lv_attributes_3_0=ruleAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlackboardCheckStringRule());
					}
					add(
						$current,
						"attributes",
						lv_attributes_3_0,
						"org.xtext.behaviortree.BehaviorTree.Attribute");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4=GreaterThanSign
		{
			newLeafNode(otherlv_4, grammarAccess.getBlackboardCheckStringAccess().getGreaterThanSignKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBlackboardCheckStringAccess().getNodeTreeNodeParserRuleCall_5_0());
				}
				lv_node_5_0=ruleTreeNode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlackboardCheckStringRule());
					}
					set(
						$current,
						"node",
						lv_node_5_0,
						"org.xtext.behaviortree.BehaviorTree.TreeNode");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=LessThanSignSolidus
		{
			newLeafNode(otherlv_6, grammarAccess.getBlackboardCheckStringAccess().getLessThanSignSolidusKeyword_6());
		}
		otherlv_7=BlackboardCheckString
		{
			newLeafNode(otherlv_7, grammarAccess.getBlackboardCheckStringAccess().getBlackboardCheckStringKeyword_7());
		}
		otherlv_8=GreaterThanSign
		{
			newLeafNode(otherlv_8, grammarAccess.getBlackboardCheckStringAccess().getGreaterThanSignKeyword_8());
		}
	)
;

// Entry rule entryRuleLeafNode
entryRuleLeafNode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLeafNodeRule()); }
	iv_ruleLeafNode=ruleLeafNode
	{ $current=$iv_ruleLeafNode.current; }
	EOF;

// Rule LeafNode
ruleLeafNode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLeafNodeAccess().getAbstractActionParserRuleCall_0());
		}
		this_AbstractAction_0=ruleAbstractAction
		{
			$current = $this_AbstractAction_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLeafNodeAccess().getConditionParserRuleCall_1());
		}
		this_Condition_1=ruleCondition
		{
			$current = $this_Condition_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAbstractAction
entryRuleAbstractAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAbstractActionRule()); }
	iv_ruleAbstractAction=ruleAbstractAction
	{ $current=$iv_ruleAbstractAction.current; }
	EOF;

// Rule AbstractAction
ruleAbstractAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAbstractActionAccess().getAlwaysSuccessParserRuleCall_0());
		}
		this_AlwaysSuccess_0=ruleAlwaysSuccess
		{
			$current = $this_AlwaysSuccess_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractActionAccess().getAlwaysFailureParserRuleCall_1());
		}
		this_AlwaysFailure_1=ruleAlwaysFailure
		{
			$current = $this_AlwaysFailure_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractActionAccess().getSetBlackboardParserRuleCall_2());
		}
		this_SetBlackboard_2=ruleSetBlackboard
		{
			$current = $this_SetBlackboard_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractActionAccess().getActionParserRuleCall_3());
		}
		this_Action_3=ruleAction
		{
			$current = $this_Action_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCondition
entryRuleCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	iv_ruleCondition=ruleCondition
	{ $current=$iv_ruleCondition.current; }
	EOF;

// Rule Condition
ruleCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getConditionAccess().getConditionAction_0(),
					$current);
			}
		)
		otherlv_1=LessThanSign
		{
			newLeafNode(otherlv_1, grammarAccess.getConditionAccess().getLessThanSignKeyword_1());
		}
		otherlv_2=Condition
		{
			newLeafNode(otherlv_2, grammarAccess.getConditionAccess().getConditionKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionAccess().getAttributesAttributeParserRuleCall_3_0());
				}
				lv_attributes_3_0=ruleAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionRule());
					}
					add(
						$current,
						"attributes",
						lv_attributes_3_0,
						"org.xtext.behaviortree.BehaviorTree.Attribute");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4=SolidusGreaterThanSign
		{
			newLeafNode(otherlv_4, grammarAccess.getConditionAccess().getSolidusGreaterThanSignKeyword_4());
		}
	)
;

// Entry rule entryRuleAlwaysSuccess
entryRuleAlwaysSuccess returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAlwaysSuccessRule()); }
	iv_ruleAlwaysSuccess=ruleAlwaysSuccess
	{ $current=$iv_ruleAlwaysSuccess.current; }
	EOF;

// Rule AlwaysSuccess
ruleAlwaysSuccess returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAlwaysSuccessAccess().getAlwaysSuccessAction_0(),
					$current);
			}
		)
		otherlv_1=LessThanSign
		{
			newLeafNode(otherlv_1, grammarAccess.getAlwaysSuccessAccess().getLessThanSignKeyword_1());
		}
		otherlv_2=AlwaysSuccess
		{
			newLeafNode(otherlv_2, grammarAccess.getAlwaysSuccessAccess().getAlwaysSuccessKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAlwaysSuccessAccess().getAttributesAttributeParserRuleCall_3_0());
				}
				lv_attributes_3_0=ruleAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAlwaysSuccessRule());
					}
					add(
						$current,
						"attributes",
						lv_attributes_3_0,
						"org.xtext.behaviortree.BehaviorTree.Attribute");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4=SolidusGreaterThanSign
		{
			newLeafNode(otherlv_4, grammarAccess.getAlwaysSuccessAccess().getSolidusGreaterThanSignKeyword_4());
		}
	)
;

// Entry rule entryRuleAlwaysFailure
entryRuleAlwaysFailure returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAlwaysFailureRule()); }
	iv_ruleAlwaysFailure=ruleAlwaysFailure
	{ $current=$iv_ruleAlwaysFailure.current; }
	EOF;

// Rule AlwaysFailure
ruleAlwaysFailure returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAlwaysFailureAccess().getAlwaysFailureAction_0(),
					$current);
			}
		)
		otherlv_1=LessThanSign
		{
			newLeafNode(otherlv_1, grammarAccess.getAlwaysFailureAccess().getLessThanSignKeyword_1());
		}
		otherlv_2=AlwaysFailure
		{
			newLeafNode(otherlv_2, grammarAccess.getAlwaysFailureAccess().getAlwaysFailureKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAlwaysFailureAccess().getAttributesAttributeParserRuleCall_3_0());
				}
				lv_attributes_3_0=ruleAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAlwaysFailureRule());
					}
					add(
						$current,
						"attributes",
						lv_attributes_3_0,
						"org.xtext.behaviortree.BehaviorTree.Attribute");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4=SolidusGreaterThanSign
		{
			newLeafNode(otherlv_4, grammarAccess.getAlwaysFailureAccess().getSolidusGreaterThanSignKeyword_4());
		}
	)
;

// Entry rule entryRuleSetBlackboard
entryRuleSetBlackboard returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSetBlackboardRule()); }
	iv_ruleSetBlackboard=ruleSetBlackboard
	{ $current=$iv_ruleSetBlackboard.current; }
	EOF;

// Rule SetBlackboard
ruleSetBlackboard returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSetBlackboardAccess().getSetBlackboardAction_0(),
					$current);
			}
		)
		otherlv_1=LessThanSign
		{
			newLeafNode(otherlv_1, grammarAccess.getSetBlackboardAccess().getLessThanSignKeyword_1());
		}
		otherlv_2=SetBlackboard
		{
			newLeafNode(otherlv_2, grammarAccess.getSetBlackboardAccess().getSetBlackboardKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSetBlackboardAccess().getAttributesAttributeParserRuleCall_3_0());
				}
				lv_attributes_3_0=ruleAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSetBlackboardRule());
					}
					add(
						$current,
						"attributes",
						lv_attributes_3_0,
						"org.xtext.behaviortree.BehaviorTree.Attribute");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4=SolidusGreaterThanSign
		{
			newLeafNode(otherlv_4, grammarAccess.getSetBlackboardAccess().getSolidusGreaterThanSignKeyword_4());
		}
	)
;

// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActionRule()); }
	iv_ruleAction=ruleAction
	{ $current=$iv_ruleAction.current; }
	EOF;

// Rule Action
ruleAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getActionAccess().getActionAction_0(),
					$current);
			}
		)
		otherlv_1=LessThanSign
		{
			newLeafNode(otherlv_1, grammarAccess.getActionAccess().getLessThanSignKeyword_1());
		}
		otherlv_2=Action
		{
			newLeafNode(otherlv_2, grammarAccess.getActionAccess().getActionKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getActionAccess().getAttributesAttributeParserRuleCall_3_0());
				}
				lv_attributes_3_0=ruleAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionRule());
					}
					add(
						$current,
						"attributes",
						lv_attributes_3_0,
						"org.xtext.behaviortree.BehaviorTree.Attribute");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4=SolidusGreaterThanSign
		{
			newLeafNode(otherlv_4, grammarAccess.getActionAccess().getSolidusGreaterThanSignKeyword_4());
		}
	)
;

// Entry rule entryRuleTreeNodesModel
entryRuleTreeNodesModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTreeNodesModelRule()); }
	iv_ruleTreeNodesModel=ruleTreeNodesModel
	{ $current=$iv_ruleTreeNodesModel.current; }
	EOF;

// Rule TreeNodesModel
ruleTreeNodesModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTreeNodesModelAccess().getTreeNodesModelAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTreeNodesModelAccess().getContentEStringParserRuleCall_1_0());
				}
				lv_content_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTreeNodesModelRule());
					}
					set(
						$current,
						"content",
						lv_content_1_0,
						"org.xtext.behaviortree.BehaviorTree.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_DEFINITION_STRING_0=RULE_DEFINITION_STRING
	{
		$current.merge(this_DEFINITION_STRING_0);
	}
	{
		newLeafNode(this_DEFINITION_STRING_0, grammarAccess.getEStringAccess().getDEFINITION_STRINGTerminalRuleCall());
	}
;
