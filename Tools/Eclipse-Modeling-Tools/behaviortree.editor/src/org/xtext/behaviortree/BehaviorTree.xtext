grammar org.xtext.behaviortree.BehaviorTree with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/behaviortree.metamodel/metamodel/behaviortree.ecore"

BTModel returns BTModel:
	'<' 'root' 'main_tree_to_execute' '=' main_tree_to_execute=[BehaviorTree|STRING] '>'
	(imports+=Import)*
	((trees+=BehaviorTree)+ &
	(nodesmodel=TreeNodesModel)?)
	'</' 'root' '>'
;

Import returns Import:
	'<''include' 'path' '=' importURI=STRING '/>'
;

BehaviorTree returns BehaviorTree:
	'<' 'BehaviorTree' (attributes+=Attribute)* '>'
	(nodes+=TreeNode)+
	'</' 'BehaviorTree' '>'
;

Attribute returns Attribute:
	name=ID '=' value=STRING
;

TreeNode returns TreeNode:
	ControlNode | DecoratorNode | LeafNode | SubtreeNode;

SubtreeNode returns SubtreeNode:
	Subtree | SubtreePlus
;

Subtree returns Subtree:
	{Subtree}
	//'<' 'Subtree' 'ref' '=' behaviortree=[BehaviorTree|STRING] 
	'<' SUBTREE_KEYWORD '=' behaviortree=[BehaviorTree|STRING]
	(attributes+=Attribute)* '/>'
;

SubtreePlus returns SubtreePlus:
	{SubtreePlus}
	'<' SUBTREEWRAPPER_KEYWORD '=' behaviortree=[BehaviorTree|STRING]
	(attributes+=Attribute)* '/>'
;

ControlNode returns ControlNode:
	Sequence | SequenceStar | Parallel | Fallback | FallbackStar | Switch
;

Sequence returns Sequence:
	{Sequence}
	'<' 'Sequence' (attributes+=Attribute)* '>'
	(nodes+=TreeNode)+
	'</' 'Sequence' '>'
;

SequenceStar returns SequenceStar:
	{SequenceStar}
	'<' 'SequenceStar' (attributes+=Attribute)* '>'
	(nodes+=TreeNode)+
	'</' 'SequenceStar' '>'
;

Fallback returns Fallback:
	{Fallback}
	'<' 'Fallback' (attributes+=Attribute)* '>'
	(nodes+=TreeNode)+
	'</' 'Fallback' '>'
;

FallbackStar returns FallbackStar:
	{FallbackStar}
	'<' 'FallbackStar' (attributes+=Attribute)* '>'
	(nodes+=TreeNode)+
	'</' 'FallbackStar' '>'
;

Parallel returns Parallel:
	{Parallel}
	'<' 'Parallel' (attributes+=Attribute)* '>'
	(nodes+=TreeNode)+
	'</' 'Parallel' '>'
;

Switch returns Switch:
	{Switch}
	'<' SWITCH_KEYWORD (attributes+=Attribute)* '>'
	(nodes+=TreeNode)*
	'</' SWITCH_KEYWORD '>'
;

DecoratorNode returns DecoratorNode:
	ForceSuccess | ForceFailure | Repeat | RetryUntilSuccess | Inverter | Timeout | BlackboardCheckDouble | BlackboardCheckInt | BlackboardCheckString
;

ForceSuccess returns ForceSuccess:
	{ForceSuccess}
	'<' 'ForceSuccess' (attributes+=Attribute)* '>'
	node=TreeNode
	'</' 'ForceSuccess' '>'
;

ForceFailure returns ForceFailure:
	{ForceFailure}
	'<' 'ForceFailure' (attributes+=Attribute)* '>'
	node=TreeNode
	'</' 'ForceFailure' '>'
;

Repeat returns Repeat:
	{Repeat}
	'<' 'Repeat' (attributes+=Attribute)* '>'
	node=TreeNode
	'</' 'Repeat' '>'
;

Inverter returns Inverter:
	{Inverter}
	'<' 'Inverter' (attributes+=Attribute)* '>'
	node=TreeNode
	'</' 'Inverter' '>'
;

Timeout returns Timeout:
	{Timeout}
	'<' 'Timeout' (attributes+=Attribute)* '>'
	node=TreeNode
	'</' 'Timeout' '>'
;

RetryUntilSuccess returns RetryUntilSuccess:
	{RetryUntilSuccess}
	'<' 'RetryUntilSuccesful' (attributes+=Attribute)* '>'
	node=TreeNode
	'</' 'RetryUntilSuccesful' '>'
;

BlackboardCheckDouble returns BlackboardCheckDouble:
	{BlackboardCheckDouble}
	'<' 'BlackboardCheckDouble' (attributes+=Attribute)* '>'
	node=TreeNode
	'</' 'BlackboardCheckDouble' '>'
;

BlackboardCheckInt returns BlackboardCheckInt:
	{BlackboardCheckInt}
	'<' 'BlackboardCheckInt' (attributes+=Attribute)* '>'
	node=TreeNode
	'</' 'BlackboardCheckInt' '>'
;

BlackboardCheckString returns BlackboardCheckString:
	{BlackboardCheckString}
	'<' 'BlackboardCheckString' (attributes+=Attribute)* '>'
	node=TreeNode
	'</' 'BlackboardCheckString' '>'
;

LeafNode returns LeafNode:
	AbstractAction | Condition
;

AbstractAction returns AbstractAction:
	AlwaysSuccess | AlwaysFailure | SetBlackboard | Action
;

Condition returns Condition:
	{Condition}
	'<' 'Condition' (attributes+=Attribute)* '/>'
;

AlwaysSuccess returns AlwaysSuccess:
	{AlwaysSuccess}
	'<' 'AlwaysSuccess' (attributes+=Attribute)* '/>'
;

AlwaysFailure returns AlwaysFailure:
	{AlwaysFailure}
	'<' 'AlwaysFailure' (attributes+=Attribute)* '/>'
;

SetBlackboard returns SetBlackboard:
	{SetBlackboard}
	'<' 'SetBlackboard' (attributes+=Attribute)* '/>'
;

Action returns Action:
	{Action}
	'<' 'Action' (attributes+=Attribute)* '/>'
;

TreeNodesModel returns TreeNodesModel:
	{TreeNodesModel}
	content=EString
;

EString returns ecore::EString:
	DEFINITION_STRING;

terminal DEFINITION_STRING: 
	('<' WS? ('T'|'t') 'ree' ('N'|'n') 'odes' ('M'|'m') 'odel' WS? '>') 
	-> ('</' WS? ('T'|'t') 'ree' ('N'|'n') 'odes' ('M'|'m') 'odel' WS? '>')
;

terminal SWITCH_KEYWORD: 
	('S'|'s') 'witch' INT
;

terminal SUBTREE_KEYWORD: 
	('S'|'s') 'ub' ('t'|'T') 'ree' WS ('I'|'i')('D'|'d')
;

terminal SUBTREEWRAPPER_KEYWORD: 
	('S'|'s') 'ub' ('T'|'t') 'ree' ('P'|'p') 'lus' WS ('I'|'i')('D'|'d') 
;

@Override
terminal ML_COMMENT : 
	('<?' -> '?>') | ('<!--' -> '-->')
;
	
