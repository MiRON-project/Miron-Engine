/*
 * generated by Xtext 2.12.0
 */
package org.xtext.behaviortree.formatting2

import behaviortree.BTModel
import behaviortree.BehaviorTree
import behaviortree.Import
import com.google.inject.Inject
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.xtext.behaviortree.services.BehaviorTreeGrammarAccess
import behaviortree.TreeNode
import behaviortree.ControlNode
import behaviortree.DecoratorNode
import behaviortree.LeafNode
import behaviortree.Subtree
import behaviortree.SubtreePlus

class BehaviorTreeFormatter extends AbstractFormatter2 {
	
	@Inject extension BehaviorTreeGrammarAccess

	def dispatch void format(BTModel bTModel, extension IFormattableDocument document) {
		
		bTModel.regionFor.keyword("<").surround[noSpace]
		bTModel.regionFor.keyword("<").prepend[newLine]
		bTModel.regionFor.keyword(">").surround[noSpace] 
		
		interior(
			bTModel.regionFor.keyword(">"),
			bTModel.regionFor.keyword("</")
		)[indent]
		
		for (Import _import : bTModel.getImports()) {
			_import.format;
		}
		for (BehaviorTree behaviorTree : bTModel.getTrees()) {
			behaviorTree.format;
		}
		bTModel.regionFor.keyword("</").surround[noSpace]
		bTModel.regionFor.keyword("</").prepend[newLine]
	}
	
	def dispatch void format(BehaviorTree behaviorTree, extension IFormattableDocument document) {
		
		behaviorTree.regionFor.keyword("<").surround[noSpace]
		behaviorTree.regionFor.keyword("<").prepend[newLine]
		behaviorTree.regionFor.keyword(">").surround[noSpace]

		interior(
			behaviorTree.regionFor.keyword(">"),
			behaviorTree.regionFor.keyword("</")
		)[indent]
		
		for (TreeNode node : behaviorTree.getNodes()) {
			node.format;
		}
		behaviorTree.regionFor.keyword("</").surround[noSpace]
		behaviorTree.regionFor.keyword("</").prepend[newLine]
	}
	
	def dispatch void format(ControlNode obj, extension IFormattableDocument document) {
		
		obj.regionFor.keyword("<").surround[noSpace]
		obj.regionFor.keyword("<").prepend[newLine]
		obj.regionFor.keyword(">").surround[noSpace]
		
		interior(
			obj.regionFor.keyword(">"),
			obj.regionFor.keyword("</")
		)[indent]
		
		for (TreeNode node : obj.getNodes()) {
			node.format;
		}
		obj.regionFor.keyword("</").prepend[newLine]
		obj.regionFor.keyword("</").surround[noSpace]
	}
	
	def dispatch void format(DecoratorNode obj, extension IFormattableDocument document) {
		obj.regionFor.keyword("<").surround[noSpace]
		obj.regionFor.keyword("<").prepend[newLine]
		obj.regionFor.keyword(">").surround[noSpace]
		
		interior(
			obj.regionFor.keyword(">"),
			obj.regionFor.keyword("</")
		)[indent]
		
		obj.getNode().format;
		
		obj.regionFor.keyword("</").prepend[newLine]
		obj.regionFor.keyword("</").surround[noSpace]
	}
	
	def dispatch void format(LeafNode obj, extension IFormattableDocument document) {
		obj.regionFor.keyword("<").surround[noSpace]
		obj.regionFor.keyword("<").prepend[newLine]
		obj.regionFor.keyword("/>").surround[noSpace]
	}
	
	def dispatch void format(Subtree obj, extension IFormattableDocument document) {
		obj.regionFor.keyword("<").surround[noSpace]
		obj.regionFor.keyword("<").prepend[newLine]
		obj.regionFor.keyword("/>").surround[noSpace]
	}
	
	def dispatch void format(SubtreePlus obj, extension IFormattableDocument document) {
		obj.regionFor.keyword("<").surround[noSpace]
		obj.regionFor.keyword("<").prepend[newLine]
		obj.regionFor.keyword("/>").surround[noSpace]
	}
	
	def dispatch void format(Import obj, extension IFormattableDocument document) {
		obj.regionFor.keyword("<").surround[noSpace]
		obj.regionFor.keyword("<").prepend[newLine]
		obj.regionFor.keyword("/>").surround[noSpace]
	}
}
